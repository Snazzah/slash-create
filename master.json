{"meta":{"version":"2.0.2","format":20,"date":1695779485944},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n\n<img src=\"/static/textlogo.png\" height=\"50\">\n\n[![NPM version](https://img.shields.io/npm/v/slash-create?maxAge=3600)](https://www.npmjs.com/package/slash-create) [![NPM downloads](https://img.shields.io/npm/dt/slash-create?maxAge=3600)](https://www.npmjs.com/package/slash-create) [![ESLint status](https://github.com/Snazzah/slash-create/workflows/ESLint/badge.svg)](https://github.com/Snazzah/slash-create/actions?query=workflow%3A%22ESLint%22) [![DeepScan grade](https://deepscan.io/api/teams/11596/projects/15103/branches/297399/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=11596&pid=15103&bid=297399) [![discord chat](https://img.shields.io/discord/311027228177727508?logo=discord&logoColor=white)](https://snaz.in/discord)\n\nCreate and sync [Discord slash commands](https://discord.com/developers/docs/interactions/application-commands).\n\n\n</div>\n\n## Features\n- Multiple server support ([Express](http://expressjs.com/), [Fastify](https://fastify.io/), etc.)\n- Hook into an existing Discord bot client\n- Sync loaded commands to Discord from slash-create\n- Load commands from a folder\n- Command throttling/cooldowns\n\n## Quickstart\n\nIf you want an easy start on getting slash commands on your bot, you can use [slash-up](https://github.com/Snazzah/slash-up) to create a project using a template.\n```\nnpx slash-up init\n```\nAfter creating a project, you can edit commands to your liking and start it up with `yarn start`.\n\nYou can also deploy a slash-create template to the following services:\n\n| Cloudflare Workers | Vercel | Heroku | Railway |\n|:-:|:-:|:-:|:-:|\n| [![Deploy to Cloudflare Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/Snazzah/slash-create-worker) | [![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FSnazzah%2Fslash-create-vercel&env=DISCORD_APP_ID,DISCORD_PUBLIC_KEY,DISCORD_BOT_TOKEN&envDescription=Variables%20needed%20to%20recognize%20and%20operate%20slash%20commands.&project-name=discord-interactions&repo-name=discord-slash-commands&demo-description=Deploy%20a%20slash-create%20server%20for%20Discord%20interactions.&demo-image=https%3A%2F%2Fget.snaz.in%2F4MVTTaR.png&demo-title=%2Fcreate&demo-url=https%3A%2F%2Fslash-create.js.org) | [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/Snazzah/slash-create-template/tree/master) | [![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/new/template/h6aVmv?referralCode=snazzah) |\n\n## Installation\n```sh\nnpm i slash-create\n```\nOr, using yarn:\n```sh\nyarn add slash-create\n```\n\n### Using webservers\nIn order to use a specific webserver, you will need to install the dependency associated with that server. The following server types require these dependencies:\n- `AWSLambdaServer`: none technically, meant for use with [AWS Lambda](https://aws.amazon.com/lambda) and [Amazon API Gateway](https://aws.amazon.com/api-gateway), see [example](https://slash-create.js.org/#/docs/main/latest/examples/lambda)\n- `AzureFunctionServer`: none technically, meant for use with [Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/), see [example](https://slash-create.js.org/#/docs/main/latest/examples/azure)\n- `ExpressServer`: `express`\n- `FastifyServer`: `fastify`\n- `GatewayServer`: none, see [example](https://slash-create.js.org/#/docs/main/latest/examples/discord-bot)\n- `GCFServer`: none technically, meant for use with [`@google-cloud/functions-framework`](https://npm.im/@google-cloud/functions-framework), see [example](https://slash-create.js.org/#/docs/main/latest/examples/gcf)\n- `VercelServer`: none, see [example](https://slash-create.js.org/#/docs/main/latest/examples/vercel)\n\n## Examples\n- [Creating a SlashCreator](https://slash-create.js.org/#/docs/main/latest/examples/basic)\n  - [Using Webservers](https://slash-create.js.org/#/docs/main/latest/examples/webserver)\n    - [Using `AWSLambdaServer`](https://slash-create.js.org/#/docs/main/latest/examples/lambda)\n    - [Using `AzureFunctionServer`](https://slash-create.js.org/#/docs/main/latest/examples/azure)\n    - [Using `GCFServer`](https://slash-create.js.org/#/docs/main/latest/examples/gcf)\n    - [Using `VercelServer`](https://slash-create.js.org/#/docs/main/latest/examples/vercel)\n  - [Using Discord Bots](https://slash-create.js.org/#/docs/main/latest/examples/discord-bot)\n- [Creating commands](https://slash-create.js.org/#/docs/main/latest/examples/command)\n\n## Useful Links\n- [**Discord Documentation on Application Commands**](https://discord.com/developers/docs/interactions/application-commands)\n- [Website](https://slash-create.js.org/) ([source](https://github.com/Snazzah/slash-create-website))\n- [Documentation](https://slash-create.js.org/#/docs/main/latest/general/welcome)\n- [Commands Template](https://github.com/Snazzah/slash-create-template)\n- [GitHub](https://github.com/Snazzah/slash-create)\n- [NPM](https://www.npmjs.com/package/slash-create)\n\n<div align=\"center\">\n    <a target=\"_blank\" href=\"https://snaz.in/discord\" title=\"Join the Discord!\">\n        <img  src=\"https://discordapp.com/api/guilds/311027228177727508/widget.png?style=banner2\" height=\"76px\" draggable=\"false\" alt=\"Join the Discord!\">\n    </a>\n</div>\n\n##### Resources & References\nThis project borrows resources and references from the following repositories:\n- [dbots.js](https://github.com/dbots-pkg/dbots.js)\n- [eris](https://github.com/abalabahaha/eris)\n- [discord.js](https://github.com/discordjs/discord.js)\n- [Commando](https://github.com/discordjs/Commando)\n- [slash-worker](https://github.com/A5rocks/slash-worker)\n- [slash-commands](https://github.com/MeguminSama/discord-slash-commands)\n- [discord-interactions](https://github.com/discord/discord-interactions-js)\n","path":"README.md"},"faq":{"name":"FAQ","type":"md","content":"# FAQ\n\n## Terminology\n\n### What are **initial messages**?\nAny first response sent out during the \"Sending command...\" message. The initial response can be a plain message or a deferred message.\n\n### What is a **deferred message**?\nA deferred message is an acknowlegement that the message will soon be edited later on. A deferred message has been sent if the response is the \"Bot is thinking...\" message.\n\n## Common Problems\n\n### `ts-node` can't load commands from folders!\n`ts-node` only compiles other TypeScript files that are imported directly and because of this, no other files are compiled and therefore not recognized. You will need to use `tsc` in order to compile everything or try [ts-devscript](https://npm.im/ts-devscript) for development environments.\n\n### My attachments aren't showing!\nAttachments cannot be sent within **ephemeral messages** and **initial messages**. You should also make sure that the files are sending **buffers**.\n\n```js\nctx.send({\n  content: 'hello',\n  file: {\n    name: 'avatar.png',\n    file: fs.readFileSync('avatar.png')\n  }\n});\n```\n### How do I edit the original message from a component context?\nUse `ctx.editParent` rather than `ctx.editOriginal`.\n\n`ctx.editOriginal` edits the first sent message by the component context, while `ctx.editParent` edits the message that has the component.\n\n### How do I remove the component buttons after they click it?\n```js\nawait ctx.editParent('You clicked the button!', { components: [] });\n```\n\n### How do I add file descriptions?\nYou can pass an `attachments` array in the message options, allowing you to add a file description. The ID here is the index of the files sent to Discord, if you sent just one file, then that ID would be `0`.\n```js\nawait ctx.send({\n  attachments: [\n    {\n      id: 0,\n      description: 'test file'\n    }\n  ],\n  file: {\n    name: 'test.txt',\n    file: Buffer.from('a')\n  }\n});\n```\n\n### How do I edit attachments on a message?\nYou can pass an `attachments` array in the message options, allowing you to edit attachments. Without this option, new files sent to Discord are appended to the current message.\n\nFor example, this replaces the attachments on the current message to the one being sent. The ID in the attachments array is the index of the files being sent.\n```js\nawait ctx.editOriginal({\n  attachments: [\n    {\n      id: 0\n    },\n    {\n      id: 1\n    }\n  ],\n  file: [\n    {\n      name: 'test.txt',\n      file: Buffer.from('a')\n    }, {\n      name: 'test2.txt',\n      file: Buffer.from('b')\n    }\n  ]\n});\n```\n\nTo retain a previous attachment, you will need to have the attachment ID and add it to the attachments array. Attachments on Discord are sorted by the time they are uploaded. You cannot edit an existing file's description, but you can add a description to new files.\n\n## External Libraries\n\n### How can I get the client from my slash command?\nStarting in version 5.0.0, slash-create allows you to pass a client object to the creator, so command can access the client object.\n```js\n// bot.js\nconst Discord = require('discord.js');\nconst { SlashCreator, GatewayServer } = require('slash-create');\n\nconst client = new Discord.Client({ /* ... */ });\nconst creator = new SlashCreator({\n  client,\n  /* ... */\n});\n\ncreator\n  .withServer(\n    new GatewayServer(\n      (handler) => client.ws.on('INTERACTION_CREATE', handler)\n    )\n  )\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  // ...\n```\n```js\n// commands/command.js\nconst { SlashCommand } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'hello',\n      description: 'Says hello to you.'\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    // this.client ...\n    return 'Hello!',\n  }\n}\n```\n\n### MessageEmbed files don't work with this!\nslash-create doesn't support `discord.js`'s MessageEmbed out of the box.\nYou can still use the builder as such, however any files attached to the builder will not be handled and should be included in the message options instead.\n```js\n// Regular embed\nconst embed = new Discord.MessageEmbed()\n  .setTitle('Hi')\n  .setColor('RANDOM')\n  .setTimestamp()\n  .setDescription('Hello');\n\nctx.send({\n  embeds: [embed]\n})\n```\n```js\n// Embed with files\nconst embed = new Discord.MessageEmbed()\n  .setTitle('Look at this image')\n  .setImage('attachment://coolimage.png');\n\nctx.send({\n  embeds: [embed],\n  file: {\n    name: 'coolimage.png',\n    file: fs.readFileSync('coolimage.png')\n  }\n})\n```\n\n### My bot sent a message but it's still thinking.\nMake sure that you have updated `slash-create` to the latest version. There is a pretty good chance you are **creating the message outside of the interaction**, which does not show that the interaction has been completed. (by editing the deferred message or using `ctx.send`)\n\n**Please make sure to use `ctx.send` or return a message (string or MessageOptions) when finishing your command interaction. Any `.send` functions outside of `ctx` will not finish the interaction.**\n","path":"docs/general/faq.md"},"changelog":{"name":"Changelog","type":"md","content":"# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n## [5.14.0] - 2023-09-27\n### Added:\n- Premium Subscription attributes and functions\n  - **BaseInteractionContext**: Added `entitlements`\n  - **MessageInteractionContext**: Added `promptPremium()`\n- **types**: Added `default_value` to select menu types\n## [5.13.0] - 2023-06-07\n### Added:\n- **User**: added support new username system ([#470](https://github.com/Snazzah/slash-create/pull/470))\n### Fixed:\n- **SlashCreator**: Set `syncPermissions` to false by default\n## [5.12.0] - 2023-04-27\n### Changed:\n- **Channel**: Updated channel object to include almost all available channel properties\n- **User**: Supports avatar decoration presets\n- **SlashCreator**: Switch to using protected internal methods ([#419](https://github.com/Snazzah/slash-create/pull/419))\n### Added:\n- **Member**: Add flags property ([#460](https://github.com/Snazzah/slash-create/pull/460))\n- **Permissions**: Added `MANAGE_EVENTS`, `VIEW_CREATOR_MONETIZATION_ANALYTICS`, `USE_SOUNDBOARD`, `SEND_VOICE_MESSAGES` permissions\n- **BaseInteractionContext**: Added `channel` property\n- **Role**: Added `tags` property\n- **Member**: Added `flags` property\n### Fixed:\n- **SlashCreator**: Fix sync guild option being ignored\n- **types**: Fixed GUILD_FORUM enum value ([#415](https://github.com/Snazzah/slash-create/pull/415))\n## [5.11.0] - 2022-12-18\n### Added:\n- **SlashCreator**: Added global modals ([#396](https://github.com/Snazzah/slash-create/pull/396))\n- **SlashCommand**: Added nsfw option\n## [5.10.0] - 2022-10-17\n### Changed:\n- **Context**: Refactored duplicate methods into a single `BaseInteractionContext` ([#384](https://github.com/Snazzah/slash-create/issues/384))\n- **Server**: Deprecated `.use` and `.addMiddleware` and made `app` member public\n- **FastifyServer**: Support for v4\n### Added:\n- **types**: `GUILD_FORUM` and `GUILD_DIRECTORY` to `ChannelType`\n- **types**: Added `USER_SELECT`, `ROLE_SELECT`, `MENTIONABLE_SELECT`, `CHANNEL_SELECT` and renamed `SELECT` to `STRING_SELECT` ([#264](https://github.com/Snazzah/slash-create/issues/264))\n## [5.9.0] - 2022-09-04\n### Changed:\n- **RequestHandler**: Updated API version to v10\n  - This shouldn't change anything when it comes to interaction-specific requests, but be mindful when making manual API requests\n### Added:\n- **MessageInteractionContext**: Editing attachments ([#358](https://github.com/Snazzah/slash-create/pull/358), [#361](https://github.com/Snazzah/slash-create/pull/361))\n- **RequestHandler**: Added ability to send audit log reason in requests\n### Fixed:\n- **types**: Fixed embed types ([#357](https://github.com/Snazzah/slash-create/pull/357))\n## [5.8.0] - 2022-08-17\n### Added:\n- **User**: Avatar Decorations\n  - Note that this isn't even out yet in *canary* but as an experiment, so this may change later or just get removed in general. This change also had some fixes with it and doesn't break anything, so it's there for *whenever* it exists since it is an existing prop in user objects.\n### Fixed:\n- **types**: Fixed option localization types\n- **SlashCreator**: Modal callbacks actually get removed after use\n- **SlashCreator**: Emit `unverifiedRequest` on bad timestamps\n- **MessageInteractionContext**: Options should no longer be modified when used in sending messages\n## [5.7.1] - 2022-07-12\n### Added:\n- **types**: Add types for `min_length` and `max_length`\n### Fixed:\n- **MessageInteractionContext:** Reflect changes on ctx.edit from [a1e2972](https://github.com/Snazzah/slash-create/commit/a1e2972) ([#336](https://github.com/Snazzah/slash-create/pull/336))\n## [5.7.0] - 2022-06-30\n### Added:\n- **MessageInteractionContext & AutocompleteContext:** Added `appPermissions` to all contexts.\n## [5.6.1] - 2022-05-21\n### Fixed:\n- **Permissions:** fixed type mixing in class functions\n## [5.6.0] - 2022-05-16\n### Added:\n- **SlashCreator:** Added `componentTimeouts` option to enable automatic component timeouts.\n### Fixed:\n- **MessageInteractionContext:** Component registry is no longer tied to the expiry of the interaction.\n- **MessageInteractionContext:** The component expiration starts at the time of registering, rather than the time of the interaction.\n## [5.5.3] - 2022-04-29\n### Added:\n- **SlashCommand:** Added `forcePermissions` option to be able to use default permissions while letting admins change permissions via Integrations page\n## [5.5.2] - 2022-04-29\n### Fixed:\n- **SlashCreator:** Fix handling outdated command classes (for slash-up compatibility)\n## [5.5.1] - 2022-04-28\n### Fixed:\n- **Permissions:** Fixed bitfield depending on class name while resolving\n## [5.5.0] - 2022-04-28\n### Changed:\n- **[Command permissions have been deprecated](https://link.snaz.in/sc-cpd)**, including these methods/options:\n  - `SyncCommandOptions#syncPermissions`\n  - `SlashCreator#syncCommandPermissions`\n  - `SlashCommandOptions#permissions`\n  - `SlashCreatorAPI#bulkUpdateCommandPermissions`\n- **SlashCommandOptions:** `#requiredPermissions` now sets member permissions within the command using `default_member_permissions`.\n- **SlashCommand:** `#commandJSON` is now deprecated in favor of `#toCommandJSON`.\n### Added:\n- **Permissions:** New flags: `SEND_MESSAGES_IN_THREADS`, `USE_EMBEDDED_ACTIVITIES`, `MODERATE_MEMBERS`\n- **ApplicationCommandPermissionType:** New type: `CHANNEL = 3`\n- **SlashCommandOptions:** Added `#dmPermission`\n- **SlashCreatorAPI:** Added `withLocalization` option to `#getCommands`\n- **CommandContext:** Initial response attachments support\n### Fixed:\n- Permission names in constants being outdated\n- `SlashCommandOptions#requiredPermissions` option checking\n## [5.4.1] - 2022-03-30\n### Fixed:\n- Fixed syncing erroring for old command classes\n## [5.4.0] - 2022-03-30\n### Added:\n- **ModalInteractionContext:** Added `#data`, `#message`, and `#editParent` ([#263](https://github.com/Snazzah/slash-create/pull/263))\n- **ModalInteractionContext:** Added `#acknowledge` ([#262](https://github.com/Snazzah/slash-create/pull/262))\n- **SlashCommand:** Added command localization ([#270](https://github.com/Snazzah/slash-create/pull/270))\n### Fixed:\n- **Message:** Fixed message mentions not being parsed correctly ([#271](https://github.com/Snazzah/slash-create/issue/271))\n## [5.3.0] - 2022-03-04\n### Added:\n- **SlashCreator:** Added `disableTimeouts` option\n### Fixed:\n- **SlashCreator:** Fixed deep equal checking when syncing\n## [5.2.1] - 2022-02-10\n### Fixed:\n- Fix types for `ApplicationCommandOptionBase` ([#247](https://github.com/Snazzah/slash-create/issue/247))\n## [5.2.0] - 2022-02-09\n### Changed:\n- `ComponentContext` and `CommandContext` now extends off of `ModalSendableContext` rather than just `MessageInteractionContext`. `ModalSendableContext` extends off of `MessageInteractionContext`.\n### Added:\n- **CommandContext:** Attachment options ([#217](https://github.com/Snazzah/slash-create/pull/217))\n- **SlashCreator:** `rawRequest` event ([#245](https://github.com/Snazzah/slash-create/pull/245))\n- Modal Interactions ([#244](https://github.com/Snazzah/slash-create/pull/244))\n## [5.1.0] - 2022-02-04\n### Added:\n- **MessageInteractionContext:** User locale and guild locale ([#216](https://github.com/Snazzah/slash-create/pull/216))\n- **SlashCreator:** Support registering custom file extensions ([#231](https://github.com/Snazzah/slash-create/pull/231))\n## [5.0.3] - 2022-01-10\n### Changed:\n- Replaced the `@discordjs/collection` dependency with a Collection class that has some of the features\n### Fixed:\n- Fixed (potential) bug with parsing allowed mentions, allowing for formatted allowed mentions to be passed in the `formatAllowedMentions` util function\n## [5.0.2] - 2022-01-06\n### Changed:\n- Reverted the `@discordjs/collection` dependency to `0.2.1` to fall into the Node v14 version requirement ([#215](https://github.com/Snazzah/slash-create/pull/215))\n  - This removes the following collection functions: `reverse`, `ensure`, `at` and `keyAt`\n### Added:\n- **types:** Support disabled select menus ([#211](https://github.com/Snazzah/slash-create/pull/211))\n## [5.0.1] - 2021-12-24\n### Fixed:\n- **SlashCreator:** Filter files in `registerCommandsIn`\n- **SlashCreator:** Fixed command invalidation in `reregisterCommand`\n## [5.0.0] - 2021-12-23\n### Breaking Changes:\n- **SlashCreator:** Removed `require-all` dependency and replaced `registerCommandsIn` options to only use strings\n### Added:\n- **SlashCreator:** Add client passthrough option\n### Removed:\n- **types:** Removed `RequireAllOptions` type\n## [4.4.2] - 2021-12-20\n### Changed:\n- Minimum Node Version is now v14\n### Fixed:\n- **SlashCreator:** Fixed command invalidation when registering commands. This should allow for different instances of `slash-create` SlashCommand classes to work.\n## [4.4.1] - 2021-12-19\n### Changed:\n- Replaced the `lodash.uniq` dependency\n### Fixed:\n- **FastifyServer:** Fixed FastifyServer not checking for servers properly in constructor\n- **util:** Fix `oneLine` function\n## [4.4.0] - 2021-12-06\n### Added:\n- **ResolvedMember:** Added guild-specific avatar properties and methods ([#185](https://github.com/Snazzah/slash-create/pull/185))\n- **MessageInteractionContext:** Added wildcard components specification to get all component events from one message ([#188](https://github.com/Snazzah/slash-create/pull/188))\n- **SlashCreator:** Add syncCommandsAsync\n### Fixed:\n- **ComponentContext:** Fixed allowing editing of just components\n## [4.3.1] - 2021-11-14\n### Added:\n- **types:** Added `min_value` and `max_value` types to integer/number options ([#175](https://github.com/Snazzah/slash-create/pull/175))\n## [4.3.0] - 2021-10-09\n### Added:\n- **ApplicationCommandOption:** Add channel type restriction option variant ([#143](https://github.com/Snazzah/slash-create/pull/143))\n- **Role:** Added role icon ([#147](https://github.com/Snazzah/slash-create/pull/147))\n- **SlashCreator:** Added global components ([#145](https://github.com/Snazzah/slash-create/pull/145))\n- **MessageInteractionContext:** Added custom timeout and on expiry functions ([#145](https://github.com/Snazzah/slash-create/pull/145))\n### Fixed:\n- **types:** Add `application_id` to request data ([#146](https://github.com/Snazzah/slash-create/pull/146))\n- **docs:** Fixed some typos ([#153](https://github.com/Snazzah/slash-create/pull/153))\n## [4.2.0] - 2021-09-24\n### Added:\n- Autocomplete function to commands ([#134](https://github.com/Snazzah/slash-create/pull/134))\n### Fixed:\n- Reloading commands clears require cache\n## [4.1.1] - 2021-09-13\n### Fixed:\n- Fixed Vercel Endpoint\n## [4.1.0] - 2021-09-13\n### Added:\n- Support for Vercel ([#121](https://github.com/Snazzah/slash-create/pull/121))\n### Fixed:\n- Channel mentions ([#120](https://github.com/Snazzah/slash-create/pull/120))\n## [4.0.1] - 2021-08-17\n### Fixed:\n- Fixed exports from last release\n## [4.0.0] - 2021-08-16\n### Removed:\n- **ApplicationCommandOption:** removed deprecated `default` option\n  - Reorder the required options instead.\n- **Permissions:** removed `MANAGE_EMOJIS` permission in favor of`MANAGE_EMOJIS_AND_STICKERS`\n- **types:** removed `CommandOption` type\n- **types:** removed `FollowUpMessageOptions` in favor of `MessageOptions`\n### Changed:\n- **types:** `RequestHandler` -> `ServerRequestHandler`\n- **types:** `TypedEmitter` -> `TypedEventEmitter`\n- **Permissions/UserFlags:** `FLAGS` constants from Permissions and UserFlags are inaccessible from the file itself. Use `Permissions.FLAGS` instead.\n- **index:** Almost everything is now properly exported to index ([#96](https://github.com/Snazzah/slash-create/pull/96))\n  - All files are no longer using `default` for exporting\n### Fixed:\n- **MessageInteractionContext:** Deleting the original message de-references the message ID from the context ([#97](https://github.com/Snazzah/slash-create/pull/97))\n- **ComponentContext:** Remove partial message parsing\n## [3.5.0] - 2021-08-11\n### Changed:\n- **Permissions:** `MANAGE_EMOJIS` is now `MANAGE_EMOJIS_AND_STICKERS`, making the former deprecated.\n### Added:\n- **SlashCommand:** Added multiple types support for context menu commands. ([#94](https://github.com/Snazzah/slash-create/pull/94), see [updated guide](https://slash-create.js.org/#/docs/main/v3.5.0/examples/command))\n- **CommandContext:** Added support for resolved messages and targeted objects. ([#94](https://github.com/Snazzah/slash-create/pull/94), see [updated guide](https://slash-create.js.org/#/docs/main/v3.5.0/examples/command))\n- **Message:** Added `pinned` property.\n- **Permissions:** Added `MANAGE_THREADS`, `USE_PUBLIC_THREADS`, `USE_PRIVATE_THREADS` and `USE_EXTERNAL_STICKERS`.\n### Fixed:\n- **SlashCommandAPI:** The interaction callback function no longer requires a token.\n## [3.4.3] - 2021-08-08\n### Fixed:\n- ComponentContext allows for partial messages\n## [3.4.2] - 2021-08-05\n### Fixed:\n- `ComponentContext.message` is now a Message class rather than a partial message\n## [3.4.1] - 2021-07-30\n### Fixed:\n- Fixed bug for node versions under v14\n## [3.4.0] - 2021-07-26\n### Changed:\n- Component callbacks have been changed internally to support other message IDs. ([#84](https://github.com/Snazzah/slash-create/pull/84))\n- Follow-up messages can now be ephemeral. ([#83](https://github.com/Snazzah/slash-create/issues/83), [10ba62d](https://github.com/Snazzah/slash-create/commit/10ba62d))\n- The FollowUpMessageOptions type def is deprecated.\n- [`ComponentSelectOption.description`](https://slash-create.js.org/#/docs/main/v3.4.0/class/ComponentSelectOption) is now optional ([#80](https://github.com/Snazzah/slash-create/pull/80))\n### Added:\n- Azure Functions Server ([#82](https://github.com/Snazzah/slash-create/pull/82))\n- [`MessageInteractionContext.registerComponentFrom`](https://slash-create.js.org/#/docs/main/v3.4.0/class/MessageInteractionContext?scrollTo=registerComponentFrom) to register components from other messages. ([#84](https://github.com/Snazzah/slash-create/pull/84))\n## [3.3.0] - 2021-07-02\n### Added:\n- Option to manually handle command interactions (`SlashCreatorOptions.handleCommandsManually`)\n  - If this is enabled, all command interactions will be sent through the `commandInteraction` event.\n- Support for Select Components\n  - Types `ComponentSelectMenu` and `ComponentSelectOption` are exported to the index\n  - `ComponentActionRow` now accepts `ComponentSelectMenu`\n  - Added `SELECT` to enum `ComponentType`\n  - Added `ComponentSelectMenu` as a component alternative of `AnyComponent`\n  - Added `values` property to `ComponentContext`\n## [3.2.3] - 2021-05-30\nHotfix for 3.2.2\n## [3.2.2] - 2021-05-30\n### Fixed:\n- Crashing on bad 429 responses ([31f4257](https://github.com/Snazzah/slash-create/commit/31f4257))\n- `syncGlobalCommands` and `syncCommandsIn` checks for changes before updateing ([fe41d87](https://github.com/Snazzah/slash-create/commit/fe41d87))\n## [3.2.1] - 2021-05-27\n### Fixed:\n- Fixed not having numbers allowed in option names\n## [3.2.0] - 2021-05-27\n### Changed:\n- `CommandContext` and `ComponentContext` are now under a parent class: `MessageInteractionContext`\n- `InterationResponseType` -> `InteractionResponseType`\n### Added:\n- Support for buttons in messages, see [docs](https://slash-create.js.org/#/docs/main/v3.2.0/examples/components) ([#59](https://github.com/Snazzah/slash-create/pull/59))\n- [`SlashCommand.onUnload`](https://slash-create.js.org/#/docs/main/v3.2.0/class/SlashCommand?scrollTo=onUnload)\n- Types `MessageOptions`, `EditMessageOptions`, `FollowUpMessageOptions`, and `MessageFile` are exported to the index\n- [`SlashCreator.cleanRegisteredComponents`](https://slash-create.js.org/#/docs/main/v3.2.0/class/SlashCreator?scrollTo=cleanRegisteredComponents)\n- Support for AWS Lambda, see [docs](https://slash-create.js.org/#/docs/main/v3.2.0/examples/lambda) ([#61](https://github.com/Snazzah/slash-create/pull/61), @ytausch)\n- `CommandOptionType.MENTIONABLE = 9`\n- Types for message embeds and attachments\n### Fixed:\n- Removed ConvertedOption type\n- Added peer dependency meta, which should remove the warning while installing\n## [3.1.0] - 2021-04-16\n### Changed:\n- Removed webserver timeout.\n### Added:\n- `USE_APPLICATION_COMMANDS` and `REQUEST_TO_SPEAK` to the permissions bitfield.\n- Slash Command Permissions ([#48](https://github.com/Snazzah/slash-create/pull/48))\n  - Commands now have an `ids` Map, populated upon syncing (or with `SlashCreator#collectCommandIDs`). This pairs the IDs of guild IDs and `'global'` to the command ID from the API.\n  - `SlashCommandOptions#defaultPermissions`\n  - You can define permissions in `SlashCommandOptions#permissions`, [See here](https://slash-create.js.org/#/docs/main/v3.1.0/examples/command) for an example.\n- Fetching messages with `CommandContext#fetch` ([9c876f4](https://github.com/Snazzah/slash-create/commit/9c876f448808120b5599e8af6d0d36f328771a81))\n- `Message#interaction` and `Message#messageReference`\n### Fixed:\n- Typing for `SlashCreatorAPI#updateCommands`\n\n\n## [3.0.1] - 2021-03-29\n### Fixed:\n- Updated command option validation\n  - Command names and option names use the documented regex pattern\n  - Choice name is now 1-32 characters\n  - Choice description is now 1-100 characters\n- Allow empty payloads when updating commands\n- Prevent webservers from auto-handling interaction errors\n\n## [3.0.0] - 2021-03-25\n### Removed:\n- **[BREAKING]** `SlashCreatorOptions#autoAcknowledgeSource` has been removed.\n- **[BREAKING]** `MessageOptions#includeSource` is removed.\n- **[BREAKING]** `InteractionResponseType.ACKNOWLEDGE` and `InteractionResponseType.CHANNEL_MESSAGE` has been removed\n- `Util.objectKeySort` is now removed.\n\n### Changed:\n- **[BREAKING]** `CommandContext#acknowledge` -> `CommandContext#defer`\n  - Deferred messages are like acknowledgements, but editable and used for processing requests.\n  - `CommandContext#defer` has one argument (`ephemeral`) for if the deferred message should be ephemeral.\n- Docs now refer \"auto-acknowledge\" to \"auto-defer\"\n- Command option and subcommand limit has increased to 25\n- `CommandContext#send` now edits a deferred message if there was a deferred message sent.\n- **[BREAKING]** `InteractionResponseType.ACKNOWLEDGE_WITH_SOURCE` -> `InteractionResponseType.DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE`\n\n### Added:\n- `SlashCommandOptions#deferEphemeral` - Whether auto-deferring should be an ephemeral message.\n- `CommandContext#deferred` - Whether the initial response has an available deferred message.\n- Ability to send attachments with `CommandContext#send`\n- Added FAQ page in documentation\n### Fixed:\n- Documentation for ResolvedMembers\n- `SlashCommand#onBlock` and `SlashCommand#onError` giving weird return types in documentation\n\n## [2.1.2] - 2021-03-16\n### Changed:\n- `Util.objectKeySort` is now deprecated.\n### Fixed:\n- Syncing commands had a major bug, sorry. ([#36](https://github.com/Snazzah/slash-create/pull/36))\n\n## [2.1.1] - 2021-03-06\n### Changed:\n- Types for most of the command options reflect on how reliable the `type` property is.\n### Fixed:\n- Removed checking the `type` property within options to check for subcommand array and options. Not all clients send this type and should not be reliable.\n\n## [2.1.0] - 2021-02-19\n### Changed:\n- Typings for command options have the `type` prop\n- `CommandOption` is deprecated\n- `CommandStringOption`, `CommandIntegerOption`, `CommandBooleanOption` are in the index\n### Added:\n- CommandContexts now support resolved objects\n  - `CommandContext#members`, `CommandContext#users`, `CommandContext#roles`, `CommandContext#channels`\n  - Note: `ResolvedMember`s in `CommandContext#members` do not have `mute`, `deaf` and `permissions` properties.\n### Fixed:\n- Updated interaction data typings with the `type` prop\n\n## [2.0.0] - 2021-02-11\n### Changed:\n- The typings for `DMInteractionRequestData` and `GuildInteractionRequestData` is in the index.\n- The typing for `InteractionRequestData` is now a **type** rather than an **interface**.\n- The `ping` event now has a `user` parameter.\n- **[BREAKING]** `CommandContext#member` and `CommandContext#guildID` is now only given in a guild context.\n- **[BREAKING]** `guildID` in command options is now `guildIDs`.\n- **[BREAKING]** `SlashCommand#guildID` has been replaced with `SlashCommand#guildIDs`.\n### Added:\n- Support for updating commands in bulk. This is now used in syncing.\n- Support for multiple guild IDs in a command class.\n    - `CommandOptions#guildIDs` can either be a string or an array of strings.\n- Support for direct message commands.\n  - `CommandContext#user` can be used in DM and guild contexts.\n### Fixed:\n- Unnessesary command updating while syncing.\n\n## [1.3.0] - 2021-01-04\n### Changed:\n- Permission bitfield now uses bigints\n- Command syncing now uses `lodash.isEqual` to check for\n- `publicKey` in creator options is now optional\n- Typing changes\n  - `CommandOption` in constants has split off into `CommandSubcommandOption` and `AnyCommandOption`, not allowing you to define options and a value.\n  - Typings for `User`, `Member` and `Message` have been set to read-only\n  - Most undocumented typings are hidden/privated\n- Export changes\n  - Some constant exports now exports to index: `InteractionType`, `InterationResponseType`, `InteractionResponseFlags`, `CommandOptionType`, `PartialApplicationCommand`, `ApplicationCommand`, `ApplicationCommandOption`, `ApplicationCommandOptionChoice`, `RawRequest`, `AnyRequestData`, `PingRequestData`, `InteractionRequestData`, `CommandMember`, `CommandUser`, `CommandData`, `AnyCommandOption`, `CommandOption`, `CommandSubcommandOption`, `ImageFormat`\n  - `ConvertedOption` now exports to index\n  - `SlashCommandOptions` now exports to index\n### Added:\n- Commands will automatically acknowledge after 3 seconds to avoid interaction invalidation\n  - You can also set `autoAcknowledgeSource` within creator options\n- Documentation for unknown commands\n- `Member#pending`\n### Fixed:\n- SlashCreator documentation\n- Option validation for unknown commands\n- Typings are ignored for `express` and `fastify`\n\n## [1.2.0] - 2020-12-19\n### Changed:\n- `ctx.options` are a bit more consistent with sub-commands. Check the [last heading in the documetation](https://slash-create.js.org/#/docs/main/v1.2.0/general/context-options) for an example.\n### Added:\n- Support for registering/unregistering commands\n  - New `SlashCreator` event: `commandUnregister`\n  - New `SlashCreator` event: `commandReregister`\n  - `SlashCreator.reregisterCommand(command, oldCommand)`\n  - `SlashCreator.unregisterCommand(command)`\n  - `SlashCommand.reload()`\n  - `SlashCommand.unload()`\n- Unknown Commands\n- [Support for Google Cloud Functions](https://slash-create.js.org/#/docs/main/v1.2.0/examples/gcf). (`GCFServer`)\n### Fixed:\n- Some documentation\n- Command finalization\n- Command throttling\n- Command options validation\n\n## [1.1.6] - 2020-12-18\n### Fixed:\n- Sending options as the first argument in `Context#send` & `Context#sendFollowUp`\n\n## [1.1.5] - 2020-12-18\n### Fixed:\n- Sending options as the first argument in `Context#edit`\n\n## [1.1.4] - 2020-12-17\n### Changed:\n- Added more validation for options\n### Added:\n- `CommandContext#subcommands`\n### Fixed:\n- Option choices validation\n\n## [1.1.3] - 2020-12-17\n### Changed:\n- Errors in `SlashCreator#startServer` are no longer caught.\n- The default port is now `8030`.\n- Some documentation clarifying things like tokens.\n### Fixed:\n- Moved `typed-emitter` to dependencies, fixing typings\n\n## [1.1.2] - 2020-12-17\n### Fixed:\n- Race conditions for command finalization\n- Errors in `SlashCommand#onError` goes to `SlashCreator#error`\n\n## [1.1.1] - 2020-12-17\n### Changed:\n- `CommandContext#options` is now a non-null object\n### Fixed:\n- Loading commands in a folder\n\n## [1.1.0] - 2020-12-17\nThis release features mostly completed documentation and changes to the packages typings. If you are using TypeScript for this package, consider this a **breaking change**.\n### Changed:\n- **[SEMI-BREAKING]** Index changes\n  - `Command` -> `SlashCommand`\n  - `Creator` -> `SlashCreator`\n  - `CommandContext` is aliased as `Context`\n  - `SlashCommand` is aliased as `Command`\n  - `SlashCreator` is aliased as `Creator`\n  - If you are using any of the changed classes for typings, you must use its class name.\n    - i.e. `{ Creator }` must be `{ SlashCreator }`\n- (typings) Renamed `AllRequestData` to `AnyRequestData`\n- (typings) Renamed `FastifyOpts` to `FastifyOptions`\n- (typings) Renamed duplicate `LatencyRef` interface in SequentialBucket to `MinimalLatencyRef`\n- (typings) Added CallbackFunction type for SequentialBucket\n### Added:\n- Fastify typings for `FastifyServer#createEndpoint`\n### Fixed:\n- Changed HTTP method in `SlashCommandAPI#updateCommand` from `PUT` to `PATCH`\n- `User#flags` now actually uses `UserFlags`\n- Renamed UserFlags class to the name \"UserFlags\"\n\n## [1.0.0] - 2020-12-16\n### Removed:\n- **[BREAKING]** `Context.initialResponseDeleted`\n- **[BREAKING]** `treq` parameter from `SlashCreator#ping` event -  The event no longer emits any parameters\n### Changed:\n- **[BREAKING]** `treq` parameter in `SlashCreator#unknownInteraction` event is now `interaction`\n### Added:\n- More documentation\n- `Context.edit(messageID, content, options)`\n- `Context.editOriginal(messageID, content, options)`\n- `Context.expired` and internal handlers using this\n- `Context.sendFollowUp(content, options)`\n- `Message` and `User` class\n- `GatewayServer` - Support for gateway events\n- `SlashCreatorAPI.interactionCallback(id, token, body)`\n- `Server.isWebserver`\n- `Server.handleInteraction()`\n### Fixed:\n- Default error messages\n- Exports for Constants and CommandOptionType\n\n## [0.2.0] - 2020-12-16\n### Removed:\n- **[BREAKING]** `Context.acknowledge` now returns a promise\n- **[BREAKING]** Removed `returnPromise` from syncCommands\n### Added:\n- Errors will be thrown if a Server without its installed package is instantiated\n### Fixed:\n- RespondFunction is now a promise\n- `Context.send` erroring\n- Added/Updated debug emit lines\n- ExpressServer for TypeScript\n\n## [0.1.0] - 2020-12-15\n- Initial release.\n\n[Unreleased]: https://github.com/Snazzah/slash-create/compare/v5.14.0...HEAD\n[0.1.0]: https://github.com/Snazzah/slash-create/releases/tag/v0.1.0\n[0.2.0]: https://github.com/Snazzah/slash-create/compare/v0.1.0...v0.2.0\n[1.0.0]: https://github.com/Snazzah/slash-create/compare/v0.2.0...v1.0.0\n[1.1.0]: https://github.com/Snazzah/slash-create/compare/v1.0.0...v1.1.0\n[1.1.1]: https://github.com/Snazzah/slash-create/compare/v1.0.0...v1.1.1\n[1.1.2]: https://github.com/Snazzah/slash-create/compare/v1.1.1...v1.1.2\n[1.1.3]: https://github.com/Snazzah/slash-create/compare/v1.1.2...v1.1.3\n[1.1.4]: https://github.com/Snazzah/slash-create/compare/v1.1.3...v1.1.4\n[1.1.5]: https://github.com/Snazzah/slash-create/compare/v1.1.4...v1.1.5\n[1.1.6]: https://github.com/Snazzah/slash-create/compare/v1.1.5...v1.1.6\n[1.2.0]: https://github.com/Snazzah/slash-create/compare/v1.1.6...v1.2.0\n[1.3.0]: https://github.com/Snazzah/slash-create/compare/v1.2.0...v1.3.0\n[2.0.0]: https://github.com/Snazzah/slash-create/compare/v1.3.0...v2.0.0\n[2.1.0]: https://github.com/Snazzah/slash-create/compare/v2.0.0...v2.1.0\n[2.1.1]: https://github.com/Snazzah/slash-create/compare/v2.1.0...v2.1.1\n[2.1.2]: https://github.com/Snazzah/slash-create/compare/v2.1.1...v2.1.2\n[3.0.0]: https://github.com/Snazzah/slash-create/compare/v2.1.2...v3.0.0\n[3.0.1]: https://github.com/Snazzah/slash-create/compare/v3.0.0...v3.0.1\n[3.1.0]: https://github.com/Snazzah/slash-create/compare/v3.0.1...v3.1.0\n[3.2.0]: https://github.com/Snazzah/slash-create/compare/v3.1.0...v3.2.0\n[3.2.1]: https://github.com/Snazzah/slash-create/compare/v3.2.0...v3.2.1\n[3.2.2]: https://github.com/Snazzah/slash-create/compare/v3.2.1...v3.2.2\n[3.2.3]: https://github.com/Snazzah/slash-create/compare/v3.2.2...v3.2.3\n[3.3.0]: https://github.com/Snazzah/slash-create/compare/v3.2.3...v3.3.0\n[3.4.0]: https://github.com/Snazzah/slash-create/compare/v3.3.0...v3.4.0\n[3.4.1]: https://github.com/Snazzah/slash-create/compare/v3.4.0...v3.4.1\n[3.4.2]: https://github.com/Snazzah/slash-create/compare/v3.4.1...v3.4.2\n[3.4.3]: https://github.com/Snazzah/slash-create/compare/v3.4.2...v3.4.3\n[3.5.0]: https://github.com/Snazzah/slash-create/compare/v3.4.3...v3.5.0\n[4.0.0]: https://github.com/Snazzah/slash-create/compare/v3.5.0...v4.0.0\n[4.0.1]: https://github.com/Snazzah/slash-create/compare/v4.0.0...v4.0.1\n[4.1.0]: https://github.com/Snazzah/slash-create/compare/v4.0.1...v4.1.0\n[4.1.1]: https://github.com/Snazzah/slash-create/compare/v4.1.0...v4.1.1\n[4.2.0]: https://github.com/Snazzah/slash-create/compare/v4.1.1...v4.2.0\n[4.3.0]: https://github.com/Snazzah/slash-create/compare/v4.2.0...v4.3.0\n[4.3.1]: https://github.com/Snazzah/slash-create/compare/v4.3.0...v4.3.1\n[4.4.0]: https://github.com/Snazzah/slash-create/compare/v4.3.0...v4.4.0\n[4.4.1]: https://github.com/Snazzah/slash-create/compare/v4.4.0...v4.4.1\n[4.4.2]: https://github.com/Snazzah/slash-create/compare/v4.4.1...v4.4.2\n[5.0.0]: https://github.com/Snazzah/slash-create/compare/v4.4.2...v5.0.0\n[5.0.1]: https://github.com/Snazzah/slash-create/compare/v5.0.0...v5.0.1\n[5.0.2]: https://github.com/Snazzah/slash-create/compare/v5.0.1...v5.0.2\n[5.0.3]: https://github.com/Snazzah/slash-create/compare/v5.0.2...v5.0.3\n[5.1.0]: https://github.com/Snazzah/slash-create/compare/v5.0.3...v5.1.0\n[5.2.0]: https://github.com/Snazzah/slash-create/compare/v5.1.0...v5.2.0\n[5.2.1]: https://github.com/Snazzah/slash-create/compare/v5.2.0...v5.2.1\n[5.3.0]: https://github.com/Snazzah/slash-create/compare/v5.2.1...v5.3.0\n[5.4.0]: https://github.com/Snazzah/slash-create/compare/v5.3.0...v5.4.0\n[5.4.1]: https://github.com/Snazzah/slash-create/compare/v5.4.0...v5.4.1\n[5.5.0]: https://github.com/Snazzah/slash-create/compare/v5.4.1...v5.5.0\n[5.5.1]: https://github.com/Snazzah/slash-create/compare/v5.5.0...v5.5.1\n[5.5.2]: https://github.com/Snazzah/slash-create/compare/v5.5.1...v5.5.2\n[5.5.3]: https://github.com/Snazzah/slash-create/compare/v5.5.2...v5.5.3\n[5.6.0]: https://github.com/Snazzah/slash-create/compare/v5.5.3...v5.6.0\n[5.6.1]: https://github.com/Snazzah/slash-create/compare/v5.6.0...v5.6.1\n[5.7.0]: https://github.com/Snazzah/slash-create/compare/v5.6.1...v5.7.0\n[5.7.1]: https://github.com/Snazzah/slash-create/compare/v5.7.0...v5.7.1\n[5.8.0]: https://github.com/Snazzah/slash-create/compare/v5.7.1...v5.8.0\n[5.9.0]: https://github.com/Snazzah/slash-create/compare/v5.8.0...v5.9.0\n[5.10.0]: https://github.com/Snazzah/slash-create/compare/v5.9.0...v5.10.0\n[5.11.0]: https://github.com/Snazzah/slash-create/compare/v5.10.0...v5.11.0\n[5.12.0]: https://github.com/Snazzah/slash-create/compare/v5.11.0...v5.12.0\n[5.14.0]: https://github.com/Snazzah/slash-create/compare/v5.12.0...v5.14.0\n","path":"CHANGELOG.md"},"context-options":{"name":"CommandContext.options","type":"md","content":"When getting options from a context, it's important to know the format of the options. This is dependent on the options that you defined in the command.\n\n### Normal commands\nFor commands without any subcommands, each option should be mapped to a key with it's respective value.\n\n```js\noptions: [{\n  type: CommandOptionType.STRING,\n  name: 'food',\n  description: 'What food do you like?'\n}, {\n  type: CommandOptionType.STRING,\n  name: 'drink',\n  description: 'What drink do you want?'\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    food: 'cheeseburger',\n    drink: 'fanta'\n  }\n*/\n```\n\n### Nested commands\nFor commands with subcommands or subcommand groups, options go down the line of the subcommand it came from.\n\n```js\noptions: [{\n  type: CommandOptionType.SUB_COMMAND,\n  name: 'order',\n  description: 'Order some food.'\n  options: [{\n    type: CommandOptionType.STRING,\n    name: 'food',\n    description: 'What food do you want?'\n  }, {\n    type: CommandOptionType.STRING,\n    name: 'drink',\n    description: 'What drink do you want?'\n  }]\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    order: {\n      food: 'cheeseburger',\n      drink: 'fanta'\n    }\n  }\n*/\n```\n\n### Nested commands with no options\nIf any nested command have optional options and the user provides nothing, an empty object will be in place.\n\n```js\noptions: [{\n  type: CommandOptionType.SUB_COMMAND,\n  name: 'order',\n  description: 'Order some food.'\n  options: [{\n    type: CommandOptionType.STRING,\n    name: 'food',\n    description: 'What food do you want?'\n  }, {\n    type: CommandOptionType.STRING,\n    name: 'drink',\n    description: 'What drink do you want?'\n  }]\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    order: {}\n  }\n*/\n```\n","path":"docs/general/context-options.md"},"unknown-command":{"name":"Unknown commands","type":"md","content":"Unknown commands are commands that fill in for commands that could not be found loaded in the creator. They are not stored normally like regular commands. This can be helpful if a guild has not yet cached the newest version of the global commands or you do not wish to sync commands in order to not lose configuration.\n\nTo make a command handled by unknown commands, you can set `unknown` to `true` in the command options.\n\nImportant notes about unknown commands:\n- The `name`, `description`, `guildID`, `requiredPermissions` and `options` are not considered, since this can be called from any command.\n- They do not use the `hasPermission` and the `onBlock` function, however the `onError` function is still used.\n","path":"docs/general/unknown-command.md"}}},"examples":{"name":"Examples","files":{"basic":{"name":"Basic Example","type":"js","content":"const { SlashCreator } = require('slash-create');\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\ncreator\n    // Registers all of your commands in the ./commands/ directory\n    .registerCommandsIn(path.join(__dirname, 'commands'))\n    // This will sync commands to Discord, it must be called after commands are loaded.\n    // This also returns itself for more chaining capabilities.\n    .syncCommands();\n","path":"docs/examples/basic.js"},"webserver":{"name":"Using a Webserver","type":"md","content":"## Creating a Server\n```js\nconst { ExpressServer } = require('slash-create');\n\ncreator\n    .withServer(new ExpressServer())\n    // Depending on what server is used, this may not be needed.\n    .startServer();\n\n/**\n * By default, this serves to `127.0.0.1:80/interactions`.\n * You can change the `serverPort` and `endpointPath` to affect where to serve to.\n */\n\n/**\n * You can also initialize the server with an existing application.\n * If you are doing this with express applications, the express application must already have `express.json()` as middleware.\n */\n\ncreator\n    // Set `alreadyListening` if the server has already started.\n    .withServer(new ExpressServer(app, { alreadyListening: true }));\n```\n\n## Debugging locally\n\nA way expose a localhost port to a URL is by using [ngrok](https://ngrok.com/). ([download](https://ngrok.com/download))\n\nFirst, download and install ngrok, then type `ngrok http 80` in a new terminal. This will create a https://*.ngrok.io URL.\n\nTo instruct discord to use your server for all user-created interactions, you must:\n- Go to to [Discord Developers Portal Applications Page](https://discord.com/developers/applications). \n- Select / Create a new application. On the application's page, fill the \"Interactions endpoint URL\" input with the https://*.ngrok.io/interactions url.\n- Invite your application to your server using this URL: `https://discord.com/oauth2/authorize?client_id=[client-id]&scope=applications.commands`\n- You're ready to go!\n\nBe aware that the ngrok URL expires after 2 hours, you'll have to restart the ngrok command after this delay.\n","path":"docs/examples/webserver.md"},"discord-bot":{"name":"Using a Discord Bot","type":"md","content":"### With [discord.js](https://github.com/discordjs/discord.js)\n```js\nconst { SlashCreator, GatewayServer } = require('slash-create');\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n  client\n});\n\ncreator\n  .withServer(\n    new GatewayServer(\n      (handler) => client.ws.on('INTERACTION_CREATE', handler)\n    )\n  )\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  .syncCommands();\n\nclient.login('BOT_TOKEN_HERE');\n```\n### With [eris](https://github.com/abalabahaha/eris)\n```js\nconst { SlashCreator, GatewayServer } = require('slash-create');\nconst Eris = require('eris');\nconst client = new Eris('BOT_TOKEN_HERE');\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n  client\n});\n\ncreator\n  .withServer(\n    new GatewayServer(\n      (handler) => client.on('rawWS', (event) => {\n        if (event.t === 'INTERACTION_CREATE') handler(event.d);\n      })\n    )\n  )\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  .syncCommands();\n\nclient.connect();\n```\n","path":"docs/examples/discord-bot.md"},"command":{"name":"Example Commands","type":"md","content":"### Basic Command\n```js\nconst { SlashCommand, CommandOptionType } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'hello',\n      description: 'Says hello to you.',\n      options: [{\n        type: CommandOptionType.STRING,\n        name: 'food',\n        description: 'What food do you like?'\n      }]\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    return ctx.options.food ? `You like ${ctx.options.food}? Nice!` : `Hello, ${ctx.user.username}!`;\n  }\n}\n```\n\n### Command with Permissions\n```js\nconst { SlashCommand, ApplicationCommandPermissionType } = require('slash-create');\n\nmodule.exports = class ExclusivityCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'exclusivity',\n      description: 'Only people who manage the guild can use this command.',\n      // Whether to enable this command for everyone by default\n      defaultPermission: false,\n      // This will be an array of permission flag names from here: https://discord.dev/topics/permissions#permissions-bitwise-permission-flags\n      requiredPermissions: ['MANAGE_GUILD']\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    return 'You can manage this guild!';\n  }\n}\n```\n\n### Command with Subcommands\n```js\nconst { SlashCommand, CommandOptionType } = require('slash-create');\nmodule.exports = class SubcommandsCommand extends SlashCommand {\n    constructor(creator) {\n        super(creator, {\n            name: 'subcommands',\n            description: 'Make a command with subcommands',\n            options: [{\n                type: CommandOptionType.SUB_COMMAND,\n                name: 'one',\n                description: 'Here is the first sub command',\n                options: [{\n                    name: 'option_one',\n                    description: 'This is the first option',\n                    type: CommandOptionType.STRING,\n                    required: true\n                }]\n            }, {\n                type: CommandOptionType.SUB_COMMAND,\n                name: 'two',\n                description: 'Here is the second sub command',\n                options: [{\n                    name: 'option_two',\n                    description: 'This is the second option',\n                    type: CommandOptionType.STRING,\n                    required: true,\n                    choices: [{\n                        name: 'option_two_one',\n                        value: 'This is the first value for sub-command two option one'\n                    }, {\n                        name: 'option_two_two',\n                        value: 'This is the second value for sub-command two option two'\n                    }]\n                }]\n            }]\n        });\n        this.filePath = __filename;\n    }\n    async run(ctx) {\n        // returns the subcommand, option, and option value\n        let returnStringValues = [ctx.subcommands[0]];\n        switch (ctx.subcommands[0]) { // Which subcommand was used?\n            case 'one':\n                switch (Object.keys(ctx.options[ctx.subcommands[0]])[0]) { // Which options was used?\n                    case 'option_one':\n                        returnStringValues.push('option_one')\n                        returnStringValues.push(ctx.options[ctx.subcommands[0]]['option_one']); // value of option\n                        break;\n                    //...\n                }\n                break;\n            case 'two':\n                switch (Object.keys(ctx.options[ctx.subcommands[0]])[0]) {\n                    case 'option_two':\n                        returnStringValues.push('option_two');\n                        returnStringValues.push(ctx.options[ctx.subcommands[0]]['option_two']);\n                        break;\n                    //...\n                }\n                break;\n        }\n        return `Subcommand: \\`${returnStringValues[0]}\\`\\nOption: \\`${returnStringValues[1]}\\`\\nValue of option: \\`${returnStringValues[2]}\\``;\n    }\n};\n\n```\n\n### Context Menu Command\n```js\nconst { SlashCommand, ApplicationCommandType } = require('slash-create');\n\nmodule.exports = class AvatarCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      // You must specify a type for context menu commands, but defaults\n      // to `CHAT_INPUT`, or regular slash commands.\n      type: ApplicationCommandType.USER,\n      name: 'Get Avatar URL',\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    // The target user can be accessed from here\n    // You can also use `ctx.targetMember` for member properties\n    const target = ctx.targetUser;\n    return `${target.username}'s Avatar: ${target.avatarURL}`;\n  }\n}\n```\n```js\nconst { SlashCommand, ApplicationCommandType } = require('slash-create');\n\nmodule.exports = class ReverseCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      type: ApplicationCommandType.MESSAGE,\n      name: 'Reverse this Message',\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    // The target message can be accessed from here\n    const msg = ctx.targetMessage;\n    return msg.content.reverse();\n  }\n}\n```\n\n### Command with Autocompletable options\n```js\nconst { SlashCommand, CommandOptionType } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'hello',\n      description: 'Says hello to you.',\n      options: [{\n        type: CommandOptionType.STRING,\n        name: 'greeting',\n        description: 'Enter a greeting!',\n        required: true,\n        autocomplete: true\n      }]\n    });\n\n    this.filePath = __filename;\n  }\n\n  async autocomplete(ctx) {\n    // You can send a list of choices with `ctx.sendResults` or by returning a list of choices.\n    // Get the focused option name with `ctx.focused`.\n    return [{ name: `Your text: ${ctx.options[ctx.focused]}`, value: ctx.options[ctx.focused] }];\n  }\n\n  async run(ctx) {\n    return `> ${ctx.options.greeting}\\nHello!`;\n  }\n}\n```\n\n### Command using Modals\n```js\nconst { SlashCommand, CommandOptionType, ComponentType, TextInputStyle } = require('slash-create');\n\nmodule.exports = class ModalCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'modal',\n      description: 'Send a cool modal.'\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    // You can send a modal this way\n    // Keep in mind providing a callback is optional, but no callback requires the custom_id to be defined.\n    ctx.sendModal(\n      {\n        title: 'Example Modal',\n        components: [\n          {\n            type: ComponentType.ACTION_ROW,\n            components: [\n              {\n                type: ComponentType.TEXT_INPUT,\n                label: 'Text Input',\n                style: TextInputStyle.SHORT,\n                custom_id: 'text_input',\n                placeholder: 'Type something...'\n              }\n            ]\n          },\n          {\n            type: ComponentType.ACTION_ROW,\n            components: [\n              {\n                type: ComponentType.TEXT_INPUT,\n                label: 'Long Text Input',\n                style: TextInputStyle.PARAGRAPH,\n                custom_id: 'long_text_input',\n                placeholder: 'Type something...'\n              }\n            ]\n          }\n        ]\n      },\n      (mctx) => {\n        mctx.send(`Your input: ${mctx.values.text_input}\\nYour long input: ${mctx.values.long_text_input}`);\n      }\n    );\n  }\n}\n```\n\n### Localized Command\nCheck [here](https://discord.com/developers/docs/reference#locales) for supported locale codes, this example uses German.\n```js\nconst { SlashCommand, CommandOptionType } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'hello',\n      nameLocalizations: {\n        de: 'hallo'\n      },\n\n      description: 'Says hello to you.',\n      descriptionLocalizations: {\n        de: 'Sagt hallo zu dir.'\n      },\n\n      // It's important to note that since option localization is passed straight to Discord, the prop names are snake cased.\n      options: [{\n        type: CommandOptionType.STRING,\n\n        name: 'food',\n        name_localizations: {\n          de: 'lebensmittel'\n        },\n\n        description: 'What food do you like?',\n        description_localizations: {\n          de: 'Welches Essen magst du?'\n        }\n      }]\n    });\n\n    this.filePath = __filename;\n  }\n\n  // If you use any package like i18next and need to asyncronously set localization, this function is ran right before syncing the command.\n  async onLocaleUpdate() {\n    // this.nameLocalizations['da'] = i18next.getFixedT('da')('command.hello.name');\n    // this.ddescriptionLocalizationse['da'] = i18next.getFixedT('da')('command.hello.description');\n  }\n\n  async run(ctx) {\n    // ctx.locale\n    // ctx.guildLocale\n\n    return ctx.options.food ? `You like ${ctx.options.food}? Nice!` : `Hello, ${ctx.user.username}!`;\n  }\n}\n```\n","path":"docs/examples/command.md"},"components":{"name":"Message Components","type":"md","content":"View the [documentation for Component Contexts](https://slash-create.js.org/#/docs/main/$$$ref/class/ComponentContext) to know what to use.\n\n### Basic Event Usage\n```js\nconst { SlashCreator } = require('slash-create');\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\n// ...\n\ncreator.on('componentInteraction', async ctx => {\n  /**\n   * This context object is similar to command context as it will\n   * still automatically acknowledge the interaction.\n   *\n   * You can still use `ctx.send` and `ctx.defer` however, there are\n   * new functions like `ctx.acknowledge` and `ctx.editParent`.\n   */\n\n  if (ctx.customID === 'example_button') {\n    await ctx.editParent('You clicked a button! This will overwrite the original message!');\n    await ctx.send('You clicked a button! This will reply to the original message!');\n  }\n\n  // Note: You MUST use `ctx.send` and must not return regular send options.\n})\n```\n\n### Usage in commands\n```js\nconst { SlashCommand, ComponentType, ButtonStyle } = require('slash-create');\n\nmodule.exports = class ButtonCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'button',\n      description: 'Show some buttons.'\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    await ctx.defer();\n    await ctx.send('here is some buttons', {\n      components: [{\n        type: ComponentType.ACTION_ROW,\n        components: [{\n          type: ComponentType.BUTTON,\n          style: ButtonStyle.PRIMARY,\n          label: 'button',\n          custom_id: 'example_button',\n          emoji: {\n            name: '👌'\n          }\n        }]\n      }]\n    });\n\n    /**\n     * This function handles component contexts within a command, so you\n     * can use the previous context aswell.\n     */\n    ctx.registerComponent('example_button', async (btnCtx) => {\n      await btnCtx.editParent('You clicked the button!');\n    });\n  }\n}\n```\n\n### Select Component Example\nNote: Only one Select component is allowed per action row. ([See Documentation](https://discord.com/developers/docs/interactions/message-components#select-menus))\n```js\nconst { SlashCommand, ComponentType } = require('slash-create');\n\nmodule.exports = class ButtonCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'class',\n      description: 'Select a class!'\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    await ctx.defer();\n    await ctx.send('What class do you want?', {\n      components: [{\n        type: ComponentType.ACTION_ROW,\n        components: [{\n          type: ComponentType.SELECT,\n          custom_id: 'class_select',\n          placeholder: \"Choose a class\",\n          min_values: 1,\n          max_values: 3,\n          options: [\n              {\n                  label: \"Rogue\",\n                  value: \"rogue\",\n                  description: \"Sneak 'n stab\",\n                  emoji: {\n                      name: \"rogue\",\n                      id: \"625891304148303894\"\n                  }\n              },\n              {\n                  label: \"Mage\",\n                  value: \"mage\",\n                  description: \"Turn 'em into a sheep\",\n                  emoji: {\n                      \"name\": \"mage\",\n                      \"id\": \"625891304081063986\"\n                  }\n              },\n              {\n                  label: \"Priest\",\n                  value: \"priest\",\n                  description: \"You get heals when I'm done doing damage\",\n                  emoji: {\n                      \"name\": \"priest\",\n                      \"id\": \"625891303795982337\"\n                  }\n              }\n          ]\n        }]\n      }]\n    });\n\n    /**\n     * This function handles component contexts within a command, so you\n     * can use the previous context aswell.\n     */\n    ctx.registerComponent('class_select', async (selectCtx) => {\n      await selectCtx.editParent('You selected the following classes: ' + selectCtx.values.join(', '));\n    });\n  }\n}\n```\n\n### Global Components\n\nGlobal components allow action callbacks to be registered when the bot starts up, thus creating reproductible responses no matter how much time has passed since the message was sent.\nThey are quite useful for server welcome messages, for example.\n\n```typescript\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator: SlashCreator) {\n    super(creator, {\n      name: 'eternity',\n\n      description: 'Says hello to you.',\n      options: []\n    });\n\n    // Since this is registered globally in the constructor, it will remain the same forever.\n    creator.registerGlobalComponent('hello', (interact) => {\n      interact.sendFollowUp(\"This button will never expire!\");\n    })\n  }\n\n\n  async run(ctx: CommandContext) {\n    return ctx.send(\"Press the button to agree to the rules\", {components: [{type: ComponentType.ACTION_ROW, components: [{type: ComponentType.BUTTON,\n      custom_id: 'hello',\n      label: 'Accept Rules',\n      style: ButtonStyle.PRIMARY,\n    }]}]});\n\n  }\n}\n\n```\n\n\n### Global Modal\n\nGlobal modal allow action callbacks to be registered when the bot starts up, thus creating reproductible responses no matter how much time has passed since the message was sent.\nThey are quite useful for server welcome messages, for example.\n\n```typescript\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator: SlashCreator) {\n    super(creator, {\n      name: 'aeon',\n\n      description: 'Says hello to you.',\n      options: []\n    });\n\n    // Since this is registered globally in the constructor, it will remain the same forever.\n    creator.registerGlobalModal('hello', (interact) => {\n      interact.sendFollowUp(`Hello ${interact.values.name}, This modal will never expire!`);\n    })\n  }\n\n\n  async run(ctx: CommandContext) {\n    return ctx.sendModal({\n      title: 'Welcome',\n      custom_id: 'hello',\n      componenets: [{type: ComponentType.ACTION_ROW, components: [{type: ComponentType.TEXT_INPUT,\n        custom_id: 'name',\n        placeholder: 'What is your name?',\n        label: 'Name',\n        style: TextInputStyle.SHORT,\n        required: true,\n      }]}]\n    })\n  }\n}\n\n```\n\n### Expirations and Callbacks\nYou can also set a custom expiration time for your components, and register a callback to be called when the component expires.\nNote that such callbacks are only called when the component receives an invokation after the expiration time has elapsed, not instantly when the component expires.\n```js\nconst { SlashCommand, ComponentType } = require('slash-create');\n\nmodule.exports = class ButtonCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'class',\n      description: 'Select a class!'\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    await ctx.defer();\n    await ctx.send('What class do you want?', {\n      components: [{\n        type: ComponentType.ACTION_ROW,\n        components: [{\n          type: ComponentType.SELECT,\n          custom_id: 'class_select',\n          placeholder: \"Choose a class\",\n          min_values: 1,\n          max_values: 3,\n          options: [\n              {\n                  label: \"Rogue\",\n                  value: \"rogue\",\n                  description: \"Sneak 'n stab\",\n                  emoji: {\n                      name: \"rogue\",\n                      id: \"625891304148303894\"\n                  }\n              },\n              {\n                  label: \"Mage\",\n                  value: \"mage\",\n                  description: \"Turn 'em into a sheep\",\n                  emoji: {\n                      \"name\": \"mage\",\n                      \"id\": \"625891304081063986\"\n                  }\n              },\n              {\n                  label: \"Priest\",\n                  value: \"priest\",\n                  description: \"You get heals when I'm done doing damage\",\n                  emoji: {\n                      \"name\": \"priest\",\n                      \"id\": \"625891303795982337\"\n                  }\n              }\n          ]\n        }]\n      }]\n    });\n\n    /**\n     * This function handles component contexts within a command, so you\n     * can use the previous context aswell.\n     */\n    ctx.registerComponent('class_select',\n      async (selectCtx) => {\n        await selectCtx.editParent('You selected the following classes: ' + selectCtx.values.join(', '));\n      },\n      5000, // Expiration time in milliseconds.\n      () => { // Callback to be called when the component expires.\n        ctx.send(\"You cannot use that component anymore. Please run the command again.\");\n      }\n    );\n  }\n}\n```\n","path":"docs/examples/components.md"},"cfworker":{"name":"Cloudflare Workers","type":"md","content":"You can deploy the template with [Cloudflare Workers](https://workers.cloudflare.com) by clicking the button below:\n\n[![Deploy to Cloudflare Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/Snazzah/slash-create-worker)\n\n\nThe [template](https://github.com/Snazzah/slash-create-worker) has a CFWorkerServer and shims the library to handle requests and allowing extra requests after the initial response. You can create a new repo from the \"Deploy to Cloudflare Workers\" and clone the repo afterwards.\n\n## Getting Started\n### Cloning the repo\nYou can either use degit to locally clone this repo without git, or [create a new repo from this template](https://github.com/Snazzah/slash-create-worker/generate) and clone that.\n```sh\nnpx degit Snazzah/slash-create-worker\n```\n\nAfter that, make sure to install dependencies using npm or yarn:\n```sh\nnpm install\n# yarn\n```\n### Installing and setting up Wrangler\n> Make sure to [sign up for a Cloudflare Workers account](https://dash.cloudflare.com/sign-up/workers) in a browser before continuing.\nInstall wrangler with npm or yarn:\n```sh\nnpm install -g @cloudflare/wrangler\n# yarn global add @cloudflare/wrangler\n```\nRead more about [installing wrangler](https://developers.cloudflare.com/workers/cli-wrangler/install-update).\n\nAfterwards, run `wrangler login` to login to your Cloudflare account with OAuth:\n```sh\nwrangler login\n```\n\nCopy `wrangler.example.toml` into `wrangler.toml`. Make sure to fill in your account ID in the config and update the name of the worker. You can find your account ID [here](https://dash.cloudflare.com/?to=/:account/workers) towards the right side.\n\n### Filling in secrets\nYou can enter in environment secrets with `wrangler secret put`, here are the keys that are required to run this:\n```sh\nwrangler secret put DISCORD_APP_ID\nwrangler secret put DISCORD_PUBLIC_KEY\nwrangler secret put DISCORD_BOT_TOKEN\n```\nFor a development environment, you can also include `COMMANDS_DEV_GUILD` for commands to be updated in that guild live\n```sh\nwrangler secret put DISCORD_APP_ID -e development\nwrangler secret put DISCORD_PUBLIC_KEY -e development\nwrangler secret put DISCORD_BOT_TOKEN -e development\nwrangler secret put COMMANDS_DEV_GUILD -e development\n```\n> If an error occurs when trying to create a worker to put the secret in, create a worker manually in the dashboard and set the subdomain. It will be overwritten later.\n\n### Development\nYou can run `npm run dev` to start a development environment and use something like ngrok to tunnel it to a URL. To sync commands, copy `.env.example` to `development.env` and fill in the variables, then run `npm run sync:dev`.\n\n> Note: When you create a command, **make sure to include it in the array of commands in `./src/commands/index.ts`**.\n\n### Production\nTo sync to production, copy `.env.example` to `.env` and fill in the variables, then run `npm run sync`. To publish code to a worker, run `npm run deploy`.\n","path":"docs/examples/cfworker.md"},"gcf":{"name":"Google Cloud Functions","type":"md","content":"Before using the server, check out [how to use the functions module](https://www.npmjs.com/package/@google-cloud/functions-framework).\n\n```js\nconst { GCFServer } = require('slash-create');\n\ncreator\n  // The first argument is required, but rhe second argument is the \"target\" or the name of the export.\n  // By default, the target is \"interactions\".\n  .withServer(new GCFServer(module.exports))\n  .registerCommandsIn(path.join(__dirname, 'commands'));\n```\n\nIf you want more examples of using Google services, check out [jasondamour/discord-gcloud-commands](https://github.com/jasondamour/discord-gcloud-commands).\n","path":"docs/examples/gcf.md"},"lambda":{"name":"AWS Lambda","type":"md","content":"### Minimal Setup Example\n\n1. Login to the [AWS Management Console](https://console.aws.amazon.com/).\n2. Navigate to *Services* &rarr; *Lambda* &rarr; *Create function*\n3. Set a function name, leave Node.js as runtime, click *Create function*\n4. Create a local Node.js project on your computer, install this library. Create a source file (e.g. `index.js`) and use the following example code:\n\n```js\nconst path = require('path');\nconst { AWSLambdaServer, SlashCreator } = require('slash-create');\n\nconst creator = new SlashCreator({\n    applicationID: process.env.DISCORD_APP_ID,\n    publicKey: process.env.DISCORD_PUBLIC_KEY,\n    token: process.env.DISCORD_BOT_TOKEN\n});\n\ncreator\n    // The first argument is required, the second argument is the name or \"target\" of the export.\n    // It defaults to 'interactions', so it would not be strictly necessary here.\n    .withServer(new AWSLambdaServer(module.exports, 'interactions'))\n    .registerCommandsIn(path.join(__dirname, 'commands'))\n    .syncCommands();\n```\n\n5. Make sure to create some example commands in the *commands* directory.\n6. Zip the whole project and upload it by selecting *Upload from* &rarr; *.zip file* in the AWS Lambda console. Your zipped folder structure should look like this (note that there is no root folder):\n\n```\nupload.zip\n├── node_modules\n│   └── ...\n├── commands\n│   └── exampleCommand.js\n├── index.js\n└── package.json (optional)\n```\n\n7. *Deploy* your code, if needed.\n8. *Edit* the runtime settings, set your handler (e.g. `index.interactions`)\n9. If necessary (like in the example code above), add your Discord credentials under *Configuration* &rarr; *Environment variables*\n10. Navigate to *Services* &rarr; *API Gateway* &rarr; *Create API* &rarr; *HTTP API* &rarr; *Build*\n11. Add a new \"Lambda\" integration, choose your previously created function\n12. Make sure to select **Payload Format Version 2.0** and assign an arbitrary API name\n13. After selecting *Next*, add a new route for Discord's outgoing webhook (Method: `POST`, Resource path: `/event`) and select your Lambda function as integration target\n14. Leave the rest as-is and create the API\n15. Note down your custom *Invoke URL* and add your resource path to it (format: `https://abcdef1234.execute-api.us-east-2.amazonaws.com/event`)\n16. Save it as Interactions Endpoint URL in the Discord Developer Portal\n17. Everything should work fine!\n\n### Additional notes\n- Please note that **syncing your commands in the Lambda handler is not recommended** because AWS will destroy and recreate your execution environment as needed, which could lead to a lot of unnecessary requests to the Discord API.\n  - A more efficient approach would be to create a separate function for syncing the commands and removing `syncCommands()` from the handler.\n- Unlike when running a bot user, AWS Lambda and other endpoint webhooks use a traditional HTTP request/response architecture.\n  - This means you only have the ability to send a single response (`.defer()` or `.send()`) for each incoming interaction.\n  - For the same reason, a `.defer()` will not be actually sent until the lambda terminates, so you shouldn't perform a long-running operation after you `.defer()`.\n  - If you need to defer and *then* send a follow-up, you will have call `.defer()`, and then trigger some sort of side effect that calls one of the non-response methods such as `.sendFollowUp()` **from another source**.\n  - For example, with Lambda, you will likely need to invoke a second, different lambda, pass it a payload that includes the interaction you're handling, and then call `.defer()`.\n  - This second lambda can then perform a long-running query and then call `.sendFollowUp()`\n","path":"docs/examples/lambda.md"},"azure":{"name":"Azure Functions","type":"md","content":"\n## Creating the Function\n\n - Create a new empty directory, and open it with VS Code\n - Install the [Azure Functions](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions) VS Code extension\n - Press <kbd>CTRL</kbd> + <kbd>SHIFT</kbd> + <kbd>P</kbd> to open the command prompt\n - Select **Azure Functions: Create new Project**\n - Select the current directory\n - Select either **TypeScript** or **JavaScript** when prompted for a language\n - Select **HTTP trigger** when prompted for a template\n - Type any function name you want\n - Select **Anonymous** when prompted for the \"Authorization Level\"\n - A new function should be created!\n\n Be aware that you can also do all these steps in the Azure Portal. \n\n## Building and deploying the Function\n\n\n### Building the Function \n\nNow that you created a Function, your folder structure should look like this: \n\n```\n├── [Function name]\n│   ├── function.json\n│   ├── sample.dat\n│   └── index.js\n├── host.json\n├── local-settings.json\n├── proxies.json\n└── package.json\n```\n\nOpen `index.js` and replace its content by this:\n\n```js\nconst { AzureFunctionServer, SlashCreator } = require('slash-create');\n\nconst creator = new SlashCreator({\n    applicationID: process.env.DISCORD_APP_ID,\n    publicKey: process.env.DISCORD_PUBLIC_KEY,\n    token: process.env.DISCORD_BOT_TOKEN\n});\n\ncreator\n  // The first argument is required, but the second argument is the \"target\" or the name of the export.\n  // By default, the target is \"interactions\".\n  .withServer(new AzureFunctionServer(module.exports))\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  // Syncing the commands each time the function is executed is wasting computing time\n  .syncCommands();\n\n```\n\nNext, open `function.json` and replace the `bindings` property to the following. Scroll down to the Details section for more info on how it works.\n\n```json\n  \"bindings\": [\n    {\n      \"authLevel\": \"anonymous\",\n      \"type\": \"httpTrigger\",\n      \"direction\": \"in\",\n      \"name\": \"req\",\n      \"methods\": [\n        \"post\"\n      ]\n    },\n    {\n      \"type\": \"http\",\n      \"direction\": \"out\",\n      \"name\": \"res\"\n    }\n  ],\n```\n\n**Don't forget to create a \"commands\" directory in the \"[Function name] directory with some sample commands.**\n\nThe last thing is to deploy the function.\n\n### Deploying the Function \n - Press <kbd>CTRL</kbd> + <kbd>SHIFT</kbd> + <kbd>P</kbd> to open the command prompt again\n - Search for **Azure Functions: Deploy to Function App...**\n - Follow the prompts, creating a new function app when prompted\n - Once deployed, open the command prompt and select \"Azure Functions: Retrieve Function URL\"\n - Follow the prompts and you should have the function's invocation URL in the clipboard. This URL should follow this pattern:   \n \n    https://[function-app-name].azurewebsites.net/api/[function-name]\n\nYou can also retrieve this URL in the Azure Portal.\n\n## Discord configuration\n\n- Go to to [Discord Developers Portal Applications Page](https://discord.com/developers/applications). \n- Select / Create a new application. On the application's page, fill the \"Interactions endpoint URL\" input with the retrieved Function URL.  \n- Invite your application to your server using this URL: `https://discord.com/oauth2/authorize?client_id=[client-id]&scope=applications.commands`\n- You're ready to go!\n\n## Debugging locally \nWaiting for the function to deploy over and over again each time you are a experimenting with a new feature can be tedious. To circumvent this problem, it is possible to create a local server. \n\n1. Install [azure-cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli), and the [Azure Functions runtime](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local) **Version 3.x**.\n2. Start the function locally by running `func start` or `npm run start` in the [Function name] directory.\n\nBy default, the function will start on port 7071. The **local** function invocation URL should be:\n\n    https://localhost:7071/api/[function-name]\n\nHowever, you need a public URL to use in interactions. An easy way to do this is with [ngrok](https://ngrok.com/). ([download](https://ngrok.com/download))\n- In another terminal, run `ngrok http 7071`. This will prompt you with a \"https://*.ngrok.io\" URL. You can now follow the **Discord configuration** part above, and fill the \"Interactions endpoint URL\" input with the ngrok URL.\n- **Note**: Be aware that the ngrok URL will expire after 2 hours. You will need to restart the ngrok command after this delay.\n\n## Details\n\nAzure Functions use something called [bindings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=javascript). This is a fancy way of decoupling components. The bindings section above declares two bindings\n\n```jsonc\n  \"bindings\": [\n    {\n      // The first binding is an input binding ...\n      \"direction\": \"in\",\n      // That is an incoming HTTP POST request...\n      \"type\": \"httpTrigger\",\n      \"methods\": [\n        \"post\"\n      ],\n      // Without authorization...\n      \"authLevel\": \"anonymous\",\n      // Bound to the variable \"req\" in the function's context\n      \"name\": \"req\"\n\n    },\n    {\n      // The second binding is an output binding ...\n      \"direction\": \"out\",\n      // That is an outgoing HTTP request...\n      \"type\": \"http\",\n      // Bound to the variable \"res\" in the function's context\n      \"name\": \"res\"\n    }\n  ],\n```\n","path":"docs/examples/azure.md"},"vercel":{"name":"Vercel","type":"md","content":"\nYou can deploy the template with [Vercel](https://vercel.com/) by clicking the button below:\n\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FSnazzah%2Fslash-create-vercel&env=DISCORD_APP_ID,DISCORD_PUBLIC_KEY,DISCORD_BOT_TOKEN&envDescription=Variables%20needed%20to%20recognize%20and%20operate%20slash%20commands.&project-name=discord-interactions&repo-name=discord-slash-commands&demo-description=Deploy%20a%20slash-create%20server%20for%20Discord%20interactions.&demo-image=https%3A%2F%2Fget.snaz.in%2F4MVTTaR.png&demo-title=%2Fcreate&demo-url=https%3A%2F%2Fslash-create.js.org)\n\n\nFill out the environment variables with the credentials from your application's page. Your interactions URL will be the domain of the deployment with `/api/interactions` appended to it. (Example: `https://slash-create.vercel.app`)\n\n> If the build fails, set the Install Command to `yarn config set ignore-engines true && yarn install --network-concurrency 1` on Vercel.\n\n\nThe [template](https://github.com/Snazzah/slash-create-vercel) will handle syncing to Discord after building. You can create a new repo from the template and deploy with Vercel with that repository.\n\n# Limitations\n\nSince the template is using Vercel's serverless functions, **registering components will not work**.\n","path":"docs/examples/vercel.md"}}}},"classes":[{"name":"SlashCreatorAPI","description":"The API handler for {@link SlashCreator}.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]}],"returns":[[["SlashCreatorAPI"]]],"meta":{"line":15,"file":"api.ts","path":"src"}},"props":[{"name":"_creator","description":"The parent creator.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"api.ts","path":"src"}}],"methods":[{"name":"bulkUpdateCommandPermissions","see":[],"examples":[],"deprecated":true,"emits":[],"params":[{"name":"guildID","type":[[["string"]]]},{"name":"commands","type":[[["Array","<"],["PartialApplicationCommandPermissions",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["GuildApplicationCommandPermissions",">>"]]],"meta":{"line":129,"file":"api.ts","path":"src"}},{"name":"createCommand","description":"Creates a command.","params":[{"name":"command","description":"The command to create.","type":[[["PartialApplicationCommand"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the command is global.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":43,"file":"api.ts","path":"src"}},{"name":"deleteCommand","description":"Deletes a command.","params":[{"name":"commandID","description":"The command ID to delete.","type":[[["string"]]]},{"name":"guildID","description":"The guild ID to delete the command. If undefined, the global command is deleted.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":92,"file":"api.ts","path":"src"}},{"name":"getCommandPermissions","params":[{"name":"guildID","type":[[["string"]]]},{"name":"commandID","type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildApplicationCommandPermissions",">"]]],"meta":{"line":108,"file":"api.ts","path":"src"}},{"name":"getCommands","description":"Gets the commands from an applicaton.","params":[{"name":"guildID","description":"The guild ID to get commands from. If undefined, global commands are fetched.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"withLocalizations","description":"Whether to include localizations within the commands.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Array","<"],["ApplicationCommand",">>"]]],"meta":{"line":27,"file":"api.ts","path":"src"}},{"name":"getGuildCommandPermissions","params":[{"name":"guildID","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["GuildApplicationCommandPermissions",">>"]]],"meta":{"line":101,"file":"api.ts","path":"src"}},{"name":"interactionCallback","description":"Responds to an interaction.","params":[{"name":"interactionID","description":"The interaction's ID.","type":[[["string"]]]},{"name":"interactionToken","description":"The interaction's token.","type":[[["string"]]]},{"name":"body","description":"The body to send.","type":[[["any"]]]},{"name":"files","description":"The files to send.","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":148,"file":"api.ts","path":"src"}},{"name":"updateCommand","description":"Updates a command.","params":[{"name":"commandID","description":"The command ID to update.","type":[[["string"]]]},{"name":"command","description":"The payload to update the command to.","type":[[["PartialApplicationCommand"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the global command is updated.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":60,"file":"api.ts","path":"src"}},{"name":"updateCommandPermissions","params":[{"name":"guildID","type":[[["string"]]]},{"name":"commandID","type":[[["string"]]]},{"name":"permissions","type":[[["Array","<"],["ApplicationCommandPermissions",">"]]]}],"returns":[[["Promise","<"],["GuildApplicationCommandPermissions",">"]]],"meta":{"line":115,"file":"api.ts","path":"src"}},{"name":"updateCommands","description":"Updates multiple commands.","params":[{"name":"commands","description":"The payload to update the commands to.","type":[[["Array","<"],["BulkUpdateCommand",">"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the global command is updated.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["ApplicationCommand",">>"]]],"meta":{"line":76,"file":"api.ts","path":"src"}}],"meta":{"line":13,"file":"api.ts","path":"src"}},{"name":"SlashCommand","description":"Represents a Discord slash command.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"opts","description":"The options for the command.","type":[[["SlashCommandOptions"]]]}],"returns":[[["SlashCommand"]]],"meta":{"line":70,"file":"command.ts","path":"src"}},"props":[{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID.","access":"private","default":"new Map<string, ThrottleObject>()","type":[[["Map","<"],["string",", "],["ThrottleObject",">"]]],"meta":{"line":70,"file":"command.ts","path":"src"}},{"name":"commandName","description":"The command's name.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"command.ts","path":"src"}},{"name":"creator","description":"The creator responsible for this command.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":67,"file":"command.ts","path":"src"}},{"name":"defaultPermission","description":"Whether to enable this command for everyone by default.'","see":[],"readonly":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":46,"file":"command.ts","path":"src"}},{"name":"deferEphemeral","description":"Whether responses from this command should defer ephemeral messages.","readonly":true,"type":[[["boolean"]]],"meta":{"line":39,"file":"command.ts","path":"src"}},{"name":"description","description":"The command's description.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":23,"file":"command.ts","path":"src"}},{"name":"descriptionLocalizations","description":"The localiztions for the command description.","type":[[["Record","<"],["string",", "],["string",">"]]],"meta":{"line":25,"file":"command.ts","path":"src"}},{"name":"dmPermission","description":"Whether to enable this command in direct messages.","readonly":true,"type":[[["boolean"]]],"meta":{"line":48,"file":"command.ts","path":"src"}},{"name":"filePath","description":"The file path of the command.\nUsed for refreshing the require cache.\nSet this to `__filename` in the constructor to enable cache clearing.","type":[[["undefined"," | "],["string"]]],"meta":{"line":59,"file":"command.ts","path":"src"}},{"name":"forcePermissions","description":"Whether to check the member's permission within command execution, regardless of admin-set command permissions.","readonly":true,"type":[[["boolean"]]],"meta":{"line":33,"file":"command.ts","path":"src"}},{"name":"guildIDs","description":"The guild ID(s) for the command.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":29,"file":"command.ts","path":"src"}},{"name":"ids","description":"A map of command IDs with its guild ID (or 'global' for global commands), used for syncing command permissions.\nThis will populate when syncing or collecting with {@link SlashCreator#collectCommandIDs}.","default":"new Map<string, string>()","type":[[["Map","<"],["string",", "],["string",">"]]],"meta":{"line":64,"file":"command.ts","path":"src"}},{"name":"nameLocalizations","description":"The localiztions for the command name.","type":[[["Record","<"],["string",", "],["string",">"]]],"meta":{"line":19,"file":"command.ts","path":"src"}},{"name":"nsfw","description":"Whether this command is age-restricted.","readonly":true,"type":[[["boolean"]]],"meta":{"line":41,"file":"command.ts","path":"src"}},{"name":"options","description":"The options for the command.","type":[[["Array","<"],["ApplicationCommandOption",">"]]],"meta":{"line":27,"file":"command.ts","path":"src"}},{"name":"permissions","description":"The command permissions per guild.","see":[],"readonly":true,"deprecated":true,"type":[[["CommandPermissions"]]],"meta":{"line":53,"file":"command.ts","path":"src"}},{"name":"requiredPermissions","description":"The default member permissions required to use the command.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":31,"file":"command.ts","path":"src"}},{"name":"throttling","description":"The throttling options for this command.","readonly":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":35,"file":"command.ts","path":"src"}},{"name":"type","description":"The type of command this is.","readonly":true,"type":[[["ApplicationCommandType"]]],"meta":{"line":21,"file":"command.ts","path":"src"}},{"name":"unknown","description":"Whether this command is used for unknown commands.","readonly":true,"type":[[["boolean"]]],"meta":{"line":37,"file":"command.ts","path":"src"}},{"name":"client","description":"The client passed from the creator","readonly":true,"type":[[["T"]]],"meta":{"line":163,"file":"command.ts","path":"src"}},{"name":"commandJSON","description":"The JSON for using commands in Discord's API.","see":[],"access":"private","readonly":true,"deprecated":true,"type":[[["PartialApplicationCommand"]]],"meta":{"line":105,"file":"command.ts","path":"src"}},{"name":"keyName","description":"The internal key name for the command.","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":157,"file":"command.ts","path":"src"}}],"methods":[{"name":"autocomplete","description":"Runs an autocomplete function.","params":[{"name":"ctx","description":"The context of the interaction","type":[[["AutocompleteContext"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":286,"file":"command.ts","path":"src"}},{"name":"finalize","description":"Finalizes the return output","access":"private","params":[{"name":"response","description":"The response from the command","type":[[["any"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["any"]]],"meta":{"line":296,"file":"command.ts","path":"src"}},{"name":"hasPermission","description":"Checks whether the context member has permission to use the command.","params":[{"name":"ctx","description":"The triggering context","type":[[["CommandContext"]]]}],"returns":[[["boolean"," | "],["string"]]],"returnsDescription":"Whether the member has permission, or an error message to respond with if they don't\n","meta":{"line":172,"file":"command.ts","path":"src"}},{"name":"onBlock","description":"Called when the command is prevented from running.","params":[{"name":"ctx","description":"Command context the command is running from","type":[[["CommandContext"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `permission`, `throttling`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block.\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds","optional":true,"type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":200,"file":"command.ts","path":"src"}},{"name":"onError","description":"Called when the command produces an error while running.","params":[{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"ctx","description":"Command context the command is running from","type":[[["CommandContext"]]]}],"returns":[[["any"]]],"meta":{"line":222,"file":"command.ts","path":"src"}},{"name":"onLocaleUpdate","description":"Called when the command's localization is requesting to be updated.","returns":[[["any"]]],"meta":{"line":230,"file":"command.ts","path":"src"}},{"name":"onUnload","description":"Called when the command is being unloaded.","returns":[[["any"]]],"meta":{"line":235,"file":"command.ts","path":"src"}},{"name":"reload","description":"Reloads the command.","returns":[[["void"]]],"meta":{"line":261,"file":"command.ts","path":"src"}},{"name":"run","description":"Runs the command.","params":[{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":278,"file":"command.ts","path":"src"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary.","access":"private","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":[[["ThrottleObject"," | "],["null"]]],"meta":{"line":242,"file":"command.ts","path":"src"}},{"name":"toCommandJSON","description":"The command object serialized into JSON.","params":[{"name":"global","description":"Whether the command is global or not.","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["PartialApplicationCommand"]]],"meta":{"line":131,"file":"command.ts","path":"src"}},{"name":"unload","description":"Unloads the command.","returns":[[["void"]]],"meta":{"line":269,"file":"command.ts","path":"src"}},{"name":"validateOptions","description":"Validates {@link SlashCommandOptions}.","scope":"static","access":"private","params":[{"name":"opts","type":[[["SlashCommandOptions"]]]}],"returns":[[["void"]]],"meta":{"line":307,"file":"command.ts","path":"src"}}],"meta":{"line":15,"file":"command.ts","path":"src"}},{"name":"SlashCreator","description":"The main class for using commands and interactions.","extends":["TypedEventEmitter"],"construct":{"name":"constructor","params":[{"name":"opts","description":"The options for the creator","type":[[["SlashCreatorOptions"]]]}],"returns":[[["SlashCreator"]]],"meta":{"line":65,"file":"creator.ts","path":"src"}},"props":[{"name":"allowedMentions","description":"The formatted allowed mentions from the options","readonly":true,"type":[[["FormattedAllowedMentions"]]],"meta":{"line":58,"file":"creator.ts","path":"src"}},{"name":"api","description":"The API handler for the creator","readonly":true,"default":"new SlashCreatorAPI(this)","type":[[["SlashCreatorAPI"]]],"meta":{"line":45,"file":"creator.ts","path":"src"}},{"name":"client","description":"The client being passed to this creator","type":[[["any"]]],"meta":{"line":56,"file":"creator.ts","path":"src"}},{"name":"commands","description":"The commands loaded onto the creator","readonly":true,"default":"new Collection<string, SlashCommand>()","type":[[["Collection","<"],["string",", "],["SlashCommand","<"],["any",">>"]]],"meta":{"line":47,"file":"creator.ts","path":"src"}},{"name":"commandsPath","description":"The path where the commands were loaded from","see":["#registerCommandsIn\n"],"type":[[["undefined"," | "],["string"]]],"meta":{"line":52,"file":"creator.ts","path":"src"}},{"name":"options","description":"The options from constructing the creator","type":[[["SlashCreatorOptions"]]],"meta":{"line":41,"file":"creator.ts","path":"src"}},{"name":"requestHandler","description":"The request handler for the creator","readonly":true,"type":[[["RequestHandler"]]],"meta":{"line":43,"file":"creator.ts","path":"src"}},{"name":"server","description":"The server being used in the creator","type":[[["Server"]]],"meta":{"line":54,"file":"creator.ts","path":"src"}},{"name":"unknownCommand","description":"The command to run when an unknown command is used.","type":[[["SlashCommand"]]],"meta":{"line":60,"file":"creator.ts","path":"src"}}],"methods":[{"name":"_createGatewayRespond","access":"private","params":[{"name":"interactionID","type":[[["string"]]]},{"name":"token","type":[[["string"]]]}],"returns":[[["RespondFunction"]]],"meta":{"line":855,"file":"creator.ts","path":"src"}},{"name":"_getCommandFromInteraction","access":"private","params":[{"name":"interaction","type":[[["InteractionRequestData"," | "],["CommandAutocompleteRequestData"]]]}],"returns":[[["undefined"," | "],["SlashCommand","<"],["any",">"]]],"meta":{"line":590,"file":"creator.ts","path":"src"}},{"name":"_onInteraction","params":[{"name":"interaction","type":[[["AnyRequestData"]]]},{"name":"respond","type":[[["RespondFunction"," | "],["null"]]]},{"name":"webserverMode","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":645,"file":"creator.ts","path":"src"}},{"name":"_onRequest","params":[{"name":"treq","type":[[["TransformedRequest"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":604,"file":"creator.ts","path":"src"}},{"name":"_runCommand","access":"private","params":[{"name":"command","type":[[["SlashCommand"]]]},{"name":"ctx","type":[[["CommandContext"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":833,"file":"creator.ts","path":"src"}},{"name":"cleanRegisteredComponents","description":"Cleans any awaiting component callbacks from command contexts.","returns":[[["void"]]],"meta":{"line":572,"file":"creator.ts","path":"src"}},{"name":"collectCommandIDs","description":"Updates the command IDs internally in the creator.\nUse this if you make any changes to commands in the API.","params":[{"name":"skipGuildErrors","description":"Whether to prevent throwing an error if the API failed to get guild commands","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":481,"file":"creator.ts","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["SlashCreator#registerCommands\n"],"examples":[],"emits":[],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":113,"file":"creator.ts","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array","<"],["any",">"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":155,"file":"creator.ts","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","see":[],"examples":["\nconst path = require('path');\ncreator.registerCommandsIn(path.join(__dirname, 'commands'));\n"],"emits":[],"params":[{"name":"commandPath","type":[[["string"]]]},{"name":"customExtensions","description":"An array of custom file extensions (`.js` and `.cjs` are already included)","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]}],"returns":[[["this"]]],"meta":{"line":178,"file":"creator.ts","path":"src"}},{"name":"registerGlobalComponent","description":"Registers a global component callback. Note that this will have no expiration, and should be invoked by the returned name.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]}],"returns":[[["void"]]],"meta":{"line":526,"file":"creator.ts","path":"src"}},{"name":"registerGlobalModal","description":"Registers a global modal callback. Note that this will have no expiration, and should be invoked by the returned name.","params":[{"name":"custom_id","description":"The custom ID of the modal to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ModalRegisterCallback"]]]}],"returns":[[["void"]]],"meta":{"line":550,"file":"creator.ts","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command. (does not support changing name, or guild IDs)","params":[{"name":"command","description":"New command","type":[[["any"]]]},{"name":"oldCommand","description":"Old command","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":197,"file":"creator.ts","path":"src"}},{"name":"startServer","description":"Starts the server, if one was defined.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":249,"file":"creator.ts","path":"src"}},{"name":"syncCommandPermissions","description":"Sync command permissions.\n<warn>This requires you to have your token set in the creator config AND have commands already synced previously.</warn>","see":[],"examples":[],"deprecated":true,"emits":[],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":469,"file":"creator.ts","path":"src"}},{"name":"syncCommands","description":"Sync all commands to Discord. This ensures that commands exist when handling them.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"opts","optional":true,"type":[[["SyncCommandOptions"]]]}],"returns":[[["this"]]],"meta":{"line":260,"file":"creator.ts","path":"src"}},{"name":"syncCommandsAsync","description":"Sync all commands to Discord asyncronously. This ensures that commands exist when handling them.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"opts","optional":true,"type":[[["SyncCommandOptions"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":271,"file":"creator.ts","path":"src"}},{"name":"syncCommandsIn","description":"Sync guild commands.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"guildID","description":"The guild to sync","type":[[["string"]]]},{"name":"deleteCommands","description":"Whether to delete command not found in the creator","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":317,"file":"creator.ts","path":"src"}},{"name":"syncGlobalCommands","description":"Sync global commands.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"deleteCommands","description":"Whether to delete command not found in the creator","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":398,"file":"creator.ts","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command.","params":[{"name":"command","description":"Command to unregister","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":224,"file":"creator.ts","path":"src"}},{"name":"unregisterGlobalComponent","description":"Unregisters a global component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":541,"file":"creator.ts","path":"src"}},{"name":"unregisterGlobalModal","description":"Unregisters a global modal callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":565,"file":"creator.ts","path":"src"}},{"name":"withServer","description":"Attaches a server to the creator.","params":[{"name":"server","description":"The server to use","type":[[["Server"]]]}],"returns":[[["this"]]],"meta":{"line":236,"file":"creator.ts","path":"src"}}],"events":[{"name":"autocompleteInteraction","description":"Emitted when a autocomplete interaction is given.","see":[],"examples":[],"emits":[],"params":[{"name":"ctx","description":"The autocomplete context","type":[[["AutocompleteContext"]]]},{"name":"command","description":"The command that is being autocompleted","optional":true,"type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":1163,"file":"constants.ts","path":"src"}},{"name":"commandBlock","description":"Emitted when a command is blocked.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was blocked","type":[[["SlashCommand"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]},{"name":"reason","description":"Reason that the command was blocked","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block.","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":1196,"file":"constants.ts","path":"src"}},{"name":"commandError","description":"Emitted when a command gave an error.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that gave an error","type":[[["SlashCommand"]]]},{"name":"err","description":"The error given","type":[[["Error"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["void"]]],"meta":{"line":1205,"file":"constants.ts","path":"src"}},{"name":"commandInteraction","description":"Emitted when a command interaction is given.\nOnly emits if `handleCommandsManually` in {@link SlashCreatorOptions} is true.","see":[],"examples":[],"emits":[],"params":[{"name":"interaction","description":"The interaction","type":[[["InteractionRequestData"]]]},{"name":"respond","description":"The response callback to the interaction","type":[[["RespondFunction"]]]},{"name":"webserverMode","description":"Whether this is from a webserver","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":1144,"file":"constants.ts","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was registered","type":[[["SlashCommand"]]]},{"name":"creator","description":"Creator that the command was registered to","type":[[["SlashCreator"]]]}],"returns":[[["void"]]],"meta":{"line":1171,"file":"constants.ts","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","see":[],"examples":[],"emits":[],"params":[{"name":"command","type":[[["SlashCommand"]]]},{"name":"oldCommand","description":"Old command","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":1186,"file":"constants.ts","path":"src"}},{"name":"commandRun","description":"Emitted when a command is ran.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was ran","type":[[["SlashCommand"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise","<"],["any",">"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["void"]]],"meta":{"line":1214,"file":"constants.ts","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was unregistered","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":1178,"file":"constants.ts","path":"src"}},{"name":"componentInteraction","description":"Emitted when a component interaction is given.","see":[],"examples":[],"emits":[],"params":[{"name":"ctx","description":"The component context","type":[[["ComponentContext"]]]}],"returns":[[["void"]]],"meta":{"line":1155,"file":"constants.ts","path":"src"}},{"name":"debug","description":"Emitted when a debug message is given.","see":[],"examples":[],"emits":[],"params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":1092,"file":"constants.ts","path":"src"}},{"name":"error","description":"Emitted when an error occurred","see":[],"examples":[],"emits":[],"params":[{"name":"err","description":"The error thrown","type":[[["Error"]]]}],"returns":[[["void"]]],"meta":{"line":1099,"file":"constants.ts","path":"src"}},{"name":"modalInteraction","description":"Emitted when a modal interaction is given.","see":[],"examples":[],"emits":[],"params":[{"name":"ctx","description":"The modal interaction context","type":[[["ModalInteractionContext"]]]}],"returns":[[["void"]]],"meta":{"line":1134,"file":"constants.ts","path":"src"}},{"name":"ping","description":"Emitted when Discord pings the interaction endpoint.","see":[],"examples":[],"emits":[],"params":[{"name":"user","description":"The user that requested the ping","optional":true,"type":[[["CommandUser"]]]}],"returns":[[["void"]]],"meta":{"line":1065,"file":"constants.ts","path":"src"}},{"name":"rawInteraction","description":"Emitted when any interaction is given.","see":[],"examples":[],"emits":[],"params":[{"name":"interaction","description":"The interaction","type":[[["AnyRequestData"]]]}],"returns":[[["void"]]],"meta":{"line":1120,"file":"constants.ts","path":"src"}},{"name":"rawREST","description":"Emitted when the Client's RequestHandler receives a response.","see":[],"examples":[],"emits":[],"params":[{"name":"request","description":"The data for the request","type":[[["RawRequest"]]]}],"returns":[[["void"]]],"meta":{"line":1078,"file":"constants.ts","path":"src"}},{"name":"rawRequest","description":"Emitted when any request is recieved.","see":[],"examples":[],"emits":[],"params":[{"name":"treq","description":"The transformed request","type":[[["TransformedRequest"]]]}],"returns":[[["void"]]],"meta":{"line":1127,"file":"constants.ts","path":"src"}},{"name":"synced","description":"Emitted when the creator successfully synced commands.","see":[],"examples":[],"emits":[],"returns":[[["void"]]],"meta":{"line":1071,"file":"constants.ts","path":"src"}},{"name":"unknownInteraction","description":"Emitted when an unknown interaction type is encountered.","see":[],"examples":[],"emits":[],"params":[{"name":"interaction","description":"The unhandled interaction","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":1113,"file":"constants.ts","path":"src"}},{"name":"unverifiedRequest","description":"Emitted when a request failed to be verified.","see":[],"examples":[],"emits":[],"params":[{"name":"treq","description":"The unverified request","type":[[["TransformedRequest"]]]}],"returns":[[["void"]]],"meta":{"line":1106,"file":"constants.ts","path":"src"}},{"name":"warn","description":"Emitted when a warning is given.","see":[],"examples":[],"emits":[],"params":[{"name":"warning","description":"The warning","type":[[["Error"," | "],["string"]]]}],"returns":[[["void"]]],"meta":{"line":1085,"file":"constants.ts","path":"src"}}],"meta":{"line":39,"file":"creator.ts","path":"src"}},{"name":"DiscordHTTPError","description":"An HTTP error from a request.","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"req","description":"A client request","type":[[["ClientRequest"]]]},{"name":"res","description":"An incoming message from the server","type":[[["IncomingMessage"]]]},{"name":"response","description":"Any {@link Server}s response class","type":[[["any"]]]},{"name":"stack","description":"The error stack","type":[[["string"]]]}],"returns":[[["DiscordHTTPError"]]],"meta":{"line":16,"file":"DiscordHTTPError.ts","path":"src/errors"}},"props":[{"name":"code","description":"The status code from the response.","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"message","description":"The response message.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"req","description":"The client request of the error.","readonly":true,"type":[[["ClientRequest"]]],"meta":{"line":6,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"res","description":"The response from the server.","readonly":true,"type":[[["IncomingMessage"]]],"meta":{"line":8,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"response","description":"The response class from a {@link Server}.","readonly":true,"type":[[["any"]]],"meta":{"line":10,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"stack","description":"The error stack.","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"Error","scope":"static","type":[[["ErrorConstructor"]]],"meta":{"line":984,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":45,"file":"DiscordHTTPError.ts","path":"src/errors"}}],"methods":[{"name":"flattenErrors","access":"private","params":[{"name":"errors","type":[[["any"]]]},{"name":"keyPrefix","optional":true,"default":"\"\"","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":49,"file":"DiscordHTTPError.ts","path":"src/errors"}}],"meta":{"line":4,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"DiscordRESTError","description":"An Discord error from a request.","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"req","description":"A client request","type":[[["ClientRequest"]]]},{"name":"res","description":"An incoming message from the server","type":[[["IncomingMessage"]]]},{"name":"response","description":"Any {@link Server}s response class","type":[[["any"]]]},{"name":"stack","description":"The error stack","type":[[["string"]]]}],"returns":[[["DiscordRESTError"]]],"meta":{"line":16,"file":"DiscordRESTError.ts","path":"src/errors"}},"props":[{"name":"code","description":"The error code from the response.","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"message","description":"The message of the error.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"req","description":"The client request of the error.","readonly":true,"type":[[["ClientRequest"]]],"meta":{"line":6,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"res","description":"The response from the server.","readonly":true,"type":[[["IncomingMessage"]]],"meta":{"line":8,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"response","description":"The response class from a {@link Server}.","readonly":true,"type":[[["any"]]],"meta":{"line":10,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"stack","description":"The error stack.","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"Error","scope":"static","type":[[["ErrorConstructor"]]],"meta":{"line":984,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":48,"file":"DiscordRESTError.ts","path":"src/errors"}}],"methods":[{"name":"flattenErrors","access":"private","params":[{"name":"errors","type":[[["any"]]]},{"name":"keyPrefix","optional":true,"default":"\"\"","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":52,"file":"DiscordRESTError.ts","path":"src/errors"}}],"meta":{"line":4,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"Server","description":"The base Server for {@link SlashCreator}.","access":"private","construct":{"name":"constructor","params":[{"name":"opts","description":"The server options","optional":true,"default":"{ alreadyListening: false }","type":[[["ServerOptions"]]]},{"name":"isWebserver","description":"Whether this server is a webserver","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Server"]]],"meta":{"line":13,"file":"server.ts","path":"src"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":11,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":13,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":27,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["ServerRequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":32,"file":"server.ts","path":"src"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":37,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"server.ts","path":"src"}}],"meta":{"line":9,"file":"server.ts","path":"src"}},{"name":"AzureFunctionServer","description":"A server for Azure Function integration","see":["https://docs.microsoft.com/en-us/azure/azure-functions/\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"moduleExports","type":[[["any"]]]},{"name":"target","optional":true,"default":"\"interactions\"","type":[[["string"]]]}],"returns":[[["AzureFunctionServer"]]],"meta":{"line":11,"file":"azure.ts","path":"src/servers"}},"props":[{"name":"_handler","access":"private","type":[[["ServerRequestHandler"]]],"meta":{"line":11,"file":"azure.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":11,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":13,"file":"server.ts","path":"src"}}],"methods":[{"name":"_onRequest","access":"private","params":[{"name":"context","type":[[["Context"]]]},{"name":"req","type":[[["HttpRequest"]]]}],"returns":[[["void"]]],"meta":{"line":18,"file":"azure.ts","path":"src/servers"}},{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":27,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["ServerRequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":51,"file":"azure.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":37,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"server.ts","path":"src"}}],"meta":{"line":10,"file":"azure.ts","path":"src/servers"}},{"name":"ExpressServer","description":"A server for Express applications.","see":["http://expressjs.com\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"app","description":"The express application. Must have express.json installed as a middleware.","optional":true,"type":[[["any"]]]},{"name":"opts","description":"The server options","optional":true,"type":[[["ServerOptions"]]]}],"returns":[[["ExpressServer"]]],"meta":{"line":14,"file":"express.ts","path":"src/servers"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":11,"file":"server.ts","path":"src"}},{"name":"app","readonly":true,"type":[[["any"]]],"meta":{"line":14,"file":"express.ts","path":"src/servers"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":13,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","description":"Adds middleware to the Express server.","see":[],"examples":[],"deprecated":true,"emits":[],"params":[{"name":"middleware","description":"The middleware to add.","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":35,"file":"express.ts","path":"src/servers"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["ServerRequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":61,"file":"express.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":37,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":86,"file":"express.ts","path":"src/servers"}},{"name":"set","description":"Sets an Express setting.","see":["http://expressjs.com/en/4x/api.html#app.settings.table"],"examples":[],"deprecated":true,"emits":[],"params":[{"name":"setting","description":"Express setting string","type":[[["string"]]]},{"name":"value","description":"The value to set the setting to","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":55,"file":"express.ts","path":"src/servers"}},{"name":"use","description":"Alias for {@link ExpressServer#addMiddleware}","see":[],"examples":[],"deprecated":true,"emits":[],"params":[{"name":"middleware","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":44,"file":"express.ts","path":"src/servers"}}],"meta":{"line":13,"file":"express.ts","path":"src/servers"}},{"name":"FastifyServer","description":"A server for Fastify applications.","see":["https://fastify.io\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"app","description":"The fastify application, or the options for initialization","optional":true,"type":[[["any"]]]},{"name":"opts","description":"The server options","optional":true,"type":[[["ServerOptions"]]]}],"returns":[[["FastifyServer"]]],"meta":{"line":16,"file":"fastify.ts","path":"src/servers"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":11,"file":"server.ts","path":"src"}},{"name":"app","readonly":true,"type":[[["any"]]],"meta":{"line":16,"file":"fastify.ts","path":"src/servers"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":13,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","description":"Adds middleware to the Fastify server.\n<warn>This requires you to have the 'middie' module registered to the server before using.</warn>","see":["https://www.fastify.io/docs/latest/Middleware/"],"examples":[],"deprecated":true,"emits":[],"params":[{"name":"middleware","description":"The middleware to add.","type":[[["Function"]]]}],"returns":[[["this"]]],"meta":{"line":40,"file":"fastify.ts","path":"src/servers"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["ServerRequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":59,"file":"fastify.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":37,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":84,"file":"fastify.ts","path":"src/servers"}},{"name":"use","description":"Alias for {@link FastifyServer#addMiddleware}","see":[],"examples":[],"deprecated":true,"emits":[],"params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["this"]]],"meta":{"line":54,"file":"fastify.ts","path":"src/servers"}}],"meta":{"line":15,"file":"fastify.ts","path":"src/servers"}},{"name":"GatewayServer","description":"A \"server\" for gateway connections to pipe events into.","extends":["Server"],"construct":{"name":"constructor","params":[{"name":"eventHandler","description":"A function that is used to handle the event for gateway interactions.","type":[[["EventHandler"]]]}],"returns":[[["GatewayServer"]]],"meta":{"line":8,"file":"gateway.ts","path":"src/servers"}},"props":[{"name":"_eventHandler","access":"private","readonly":true,"type":[[["EventHandler"]]],"meta":{"line":8,"file":"gateway.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":11,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":13,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":27,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["ServerRequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":32,"file":"server.ts","path":"src"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":17,"file":"gateway.ts","path":"src/servers"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"server.ts","path":"src"}}],"meta":{"line":7,"file":"gateway.ts","path":"src/servers"}},{"name":"GCFServer","description":"A server for Google Cloud Functions.","see":["https://cloud.google.com/functions/\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"moduleExports","description":"The exports for your module, must be `module.exports`","type":[[["any"]]]},{"name":"target","description":"The name of the exported function","optional":true,"default":"\"interactions\"","type":[[["string"]]]}],"returns":[[["GCFServer"]]],"meta":{"line":11,"file":"gcf.ts","path":"src/servers"}},"props":[{"name":"_handler","access":"private","type":[[["ServerRequestHandler"]]],"meta":{"line":11,"file":"gcf.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":11,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":13,"file":"server.ts","path":"src"}}],"methods":[{"name":"_onRequest","access":"private","params":[{"name":"req","type":[[["Express","."],["Request"]]]},{"name":"res","type":[[["Express","."],["Response"]]]}],"returns":[[["any"]]],"meta":{"line":22,"file":"gcf.ts","path":"src/servers"}},{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":27,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["ServerRequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":47,"file":"gcf.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":37,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"server.ts","path":"src"}}],"meta":{"line":10,"file":"gcf.ts","path":"src/servers"}},{"name":"AWSLambdaServer","description":"A server for AWS Lambda proxy integrations","see":["https://aws.amazon.com/lambda/","https://aws.amazon.com/api-gateway/\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"moduleExports","description":"The exports for your module, must be `module.exports`","type":[[["any"]]]},{"name":"target","description":"The name of the exported lambda handler (only HTTP APIs with payload version 2.0 are supported)","optional":true,"default":"\"interactions\"","type":[[["string"]]]}],"returns":[[["AWSLambdaServer"]]],"meta":{"line":13,"file":"lambda.ts","path":"src/servers"}},"props":[{"name":"_handler","access":"private","type":[[["ServerRequestHandler"]]],"meta":{"line":13,"file":"lambda.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":11,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":13,"file":"server.ts","path":"src"}}],"methods":[{"name":"_onRequest","access":"private","params":[{"name":"event","type":[[["APIGatewayProxyEventV2"]]]},{"name":"_context","type":[[["Context"]]]},{"name":"callback","type":[[["APIGatewayProxyCallbackV2"]]]}],"returns":[[["void"]]],"meta":{"line":24,"file":"lambda.ts","path":"src/servers"}},{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":27,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["ServerRequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":67,"file":"lambda.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":37,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"server.ts","path":"src"}}],"meta":{"line":12,"file":"lambda.ts","path":"src/servers"}},{"name":"VercelServer","description":"A server for Vercel.","see":["https://vercel.com/","https://vercel.com/guides/handling-node-request-body\n"],"extends":["Server"],"construct":{"name":"constructor","returns":[[["VercelServer"]]],"meta":{"line":12,"file":"vercel.ts","path":"src/servers"}},"props":[{"name":"_handler","access":"private","type":[[["ServerRequestHandler"]]],"meta":{"line":12,"file":"vercel.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":11,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":13,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":27,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["ServerRequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":44,"file":"vercel.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":37,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"server.ts","path":"src"}},{"name":"vercelEndpoint","description":"The endpoint Vercel uses for serverless functions.","params":[{"name":"req","type":[[["VercelRequest"]]]},{"name":"res","type":[[["VercelResponse"]]]}],"returns":[[["any"]]],"meta":{"line":19,"file":"vercel.ts","path":"src/servers"}}],"meta":{"line":11,"file":"vercel.ts","path":"src/servers"}},{"name":"Channel","description":"Represents a resolved channel object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["CommandChannel"]]]}],"returns":[[["Channel"]]],"meta":{"line":60,"file":"channel.ts","path":"src/structures"}},"props":[{"name":"_permissions","access":"private","type":[[["undefined"," | "],["string"]]],"meta":{"line":60,"file":"channel.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":59,"file":"channel.ts","path":"src/structures"}},{"name":"availableTags","description":"The available tags that can be used in posts (Forum channels only)","readonly":true,"type":[[["Array","<"],["ForumTag",">"]]],"meta":{"line":57,"file":"channel.ts","path":"src/structures"}},{"name":"bitrate","description":"The voice channel's bitrate (Voice channels only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":33,"file":"channel.ts","path":"src/structures"}},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration of posts (Forum channels only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":55,"file":"channel.ts","path":"src/structures"}},{"name":"defaultForumLayout","description":"The default layout of posts (Forum channels only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":53,"file":"channel.ts","path":"src/structures"}},{"name":"defaultReactionEmoji","description":"The default reaction emoji for posts","readonly":true,"type":[[["ForumDefaultReaction"," | "],["null"]]],"meta":{"line":51,"file":"channel.ts","path":"src/structures"}},{"name":"defaultSortOrder","description":"The default sort order of posts (Forum channels only)","readonly":true,"type":[[["number"," | "],["null"]]],"meta":{"line":49,"file":"channel.ts","path":"src/structures"}},{"name":"defaultThreadRateLimitPerUser","description":"The default rate limit per user for posts (Forum channels only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":47,"file":"channel.ts","path":"src/structures"}},{"name":"flags","description":"The channel's flags as a bitfield","readonly":true,"type":[[["number"]]],"meta":{"line":13,"file":"channel.ts","path":"src/structures"}},{"name":"guildID","description":"The ID of the guild the channel is in (Guild channels only)","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":18,"file":"channel.ts","path":"src/structures"}},{"name":"id","description":"The channel's ID","readonly":true,"type":[[["string"]]],"meta":{"line":9,"file":"channel.ts","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in the channel","readonly":true,"type":[[["string"," | "],["null"]]],"meta":{"line":11,"file":"channel.ts","path":"src/structures"}},{"name":"memberCount","description":"The approximate count of users in a thread (Threads only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":44,"file":"channel.ts","path":"src/structures"}},{"name":"messageCount","description":"The amount of messages in the thread, excluding the original message and deleted messages (Threads only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":42,"file":"channel.ts","path":"src/structures"}},{"name":"name","description":"The channel's name (Guild channels only)","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":16,"file":"channel.ts","path":"src/structures"}},{"name":"nsfw","description":"Whether the channel is marked as NSFW (Guild channels only)","readonly":true,"type":[[["undefined"," | "],["false"," | "],["true"]]],"meta":{"line":28,"file":"channel.ts","path":"src/structures"}},{"name":"parentID","description":"The ID of the channel's parent channel (Guild channels only)","readonly":true,"type":[[["string"," | "],["null"]]],"meta":{"line":26,"file":"channel.ts","path":"src/structures"}},{"name":"position","description":"The channel's position (Guild channels only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":24,"file":"channel.ts","path":"src/structures"}},{"name":"rateLimitPerUser","description":"The amount of seconds the channel's slowmode is set to (Guild channels only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":22,"file":"channel.ts","path":"src/structures"}},{"name":"rtcRegion","description":"The voice channel's RTC region if set (Voice channels only)","readonly":true,"type":[[["string"," | "],["null"]]],"meta":{"line":31,"file":"channel.ts","path":"src/structures"}},{"name":"threadMetadata","description":"The thread metadata (Threads only)","readonly":true,"type":[[["ThreadMetadata"]]],"meta":{"line":38,"file":"channel.ts","path":"src/structures"}},{"name":"topic","description":"The channel's topic (Guild channels only)","readonly":true,"type":[[["string"," | "],["null"]]],"meta":{"line":20,"file":"channel.ts","path":"src/structures"}},{"name":"totalMessageSent","description":"The amount of messages ever sent in the thread, not decrementing from deleted messages (Threads only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":40,"file":"channel.ts","path":"src/structures"}},{"name":"type","description":"The channel's type","readonly":true,"type":[[["ChannelType"]]],"meta":{"line":7,"file":"channel.ts","path":"src/structures"}},{"name":"userLimit","description":"The voice channel's user limit (Voice channels only)","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":35,"file":"channel.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this channel.","readonly":true,"type":[[["string"]]],"meta":{"line":100,"file":"channel.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the application has in the channel.","readonly":true,"type":[[["null"," | "],["Permissions"]]],"meta":{"line":105,"file":"channel.ts","path":"src/structures"}}],"meta":{"line":5,"file":"channel.ts","path":"src/structures"}},{"name":"AutocompleteContext","description":"Represents a autocomplete interaction context.","extends":["BaseInteractionContext"],"construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data.","type":[[["CommandAutocompleteRequestData"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]}],"returns":[[["AutocompleteContext"]]],"meta":{"line":21,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},"props":[{"name":"appPermissions","description":"The permissions the application has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":37,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"attachments","description":"The resolved attachments of the interaction.","readonly":true,"default":"new Collection<string, AttachmentData>()","type":[[["Collection","<"],["string",", "],["AttachmentData",">"]]],"meta":{"line":52,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channel","description":"The channel that interaction was used in.","readonly":true,"type":[[["Channel"]]],"meta":{"line":33,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":48,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"data","description":"The full interaction data.","readonly":true,"type":[[["CommandAutocompleteRequestData"]]],"meta":{"line":10,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},{"name":"entitlements","description":"The entitlements the invoking user has.","readonly":true,"type":[[["Array","<"],["AppEntitlement",">"]]],"meta":{"line":39,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"focused","description":"The option name that is currently focused.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":23,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildLocale","description":"The guild's perferred locale, if invoked in a guild.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":27,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":35,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"locale","description":"The user's locale","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":25,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":29,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":44,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"messages","description":"The resolved messages of the interaction.","readonly":true,"default":"new Collection<string, Message>()","type":[[["Collection","<"],["string",", "],["Message",">"]]],"meta":{"line":50,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"options","description":"The options given to the command.","readonly":true,"type":[[["{}"]]],"meta":{"line":12,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},{"name":"responded","description":"Whether the interaction has been responded to.","default":"false","type":[[["boolean"]]],"meta":{"line":19,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":46,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"subcommands","description":"The subcommands the member used in order.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":16,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":31,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":42,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":110,"file":"baseInteraction.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"sendResults","description":"Sends the results of an autocomplete interaction.","params":[{"name":"choices","description":"The choices to display","type":[[["Array","<"],["AutocompleteChoice",">"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":42,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},{"name":"convertOptions","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]}],"returns":[[["{}"]]],"meta":{"line":57,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},{"name":"getFocusedOption","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]}],"returns":[[["string"," | "],["undefined"]]],"meta":{"line":68,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}}],"meta":{"line":8,"file":"autocompleteContext.ts","path":"src/structures/interfaces"}},{"name":"BaseInteractionContext","description":"Represents a basic interaction context.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data.","type":[[["any"]]]}],"returns":[[["BaseInteractionContext"]]],"meta":{"line":52,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},"props":[{"name":"appPermissions","description":"The permissions the application has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":37,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"attachments","description":"The resolved attachments of the interaction.","readonly":true,"default":"new Collection<string, AttachmentData>()","type":[[["Collection","<"],["string",", "],["AttachmentData",">"]]],"meta":{"line":52,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channel","description":"The channel that interaction was used in.","readonly":true,"type":[[["Channel"]]],"meta":{"line":33,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":48,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"entitlements","description":"The entitlements the invoking user has.","readonly":true,"type":[[["Array","<"],["AppEntitlement",">"]]],"meta":{"line":39,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":23,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildLocale","description":"The guild's perferred locale, if invoked in a guild.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":27,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":35,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"locale","description":"The user's locale","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":25,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":29,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":44,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"messages","description":"The resolved messages of the interaction.","readonly":true,"default":"new Collection<string, Message>()","type":[[["Collection","<"],["string",", "],["Message",">"]]],"meta":{"line":50,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":46,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":31,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":42,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":110,"file":"baseInteraction.ts","path":"src/structures/interfaces"}}],"meta":{"line":13,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"CommandContext","description":"Context representing a command interaction.","extends":["ModalSendableContext"],"construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data for the context.","type":[[["InteractionRequestData"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]},{"name":"webserverMode","description":"Whether the interaction was from a webserver.","type":[[["boolean"]]]},{"name":"deferEphemeral","description":"Whether the context should auto-defer ephemeral messages.","optional":true,"default":"false","type":[[["boolean"]]]},{"name":"useTimeout","description":"Whether to use the deferral timeout.","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["CommandContext"]]],"meta":{"line":25,"file":"commandContext.ts","path":"src/structures/interfaces"}},"props":[{"name":"appPermissions","description":"The permissions the application has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":37,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"attachments","description":"The resolved attachments of the interaction.","readonly":true,"default":"new Collection<string, AttachmentData>()","type":[[["Collection","<"],["string",", "],["AttachmentData",">"]]],"meta":{"line":52,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channel","description":"The channel that interaction was used in.","readonly":true,"type":[[["Channel"]]],"meta":{"line":33,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":48,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"commandID","description":"The command's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"commandName","description":"The command's name.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"commandType","description":"The command's type.","readonly":true,"type":[[["ApplicationCommandType"]]],"meta":{"line":12,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"data","description":"The full interaction data.","readonly":true,"type":[[["InteractionRequestData"]]],"meta":{"line":9,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":13,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"entitlements","description":"The entitlements the invoking user has.","readonly":true,"type":[[["Array","<"],["AppEntitlement",">"]]],"meta":{"line":39,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":23,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildLocale","description":"The guild's perferred locale, if invoked in a guild.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":27,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":11,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":35,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"locale","description":"The user's locale","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":25,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":29,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":44,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"messageID","description":"The original message ID, automatically set when editing/fetching original message.","type":[[["undefined"," | "],["string"]]],"meta":{"line":15,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"messages","description":"The resolved messages of the interaction.","readonly":true,"default":"new Collection<string, Message>()","type":[[["Collection","<"],["string",", "],["Message",">"]]],"meta":{"line":50,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"options","description":"The options given to the command.","readonly":true,"type":[[["{}"]]],"meta":{"line":20,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":46,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"subcommands","description":"The subcommands the member used in order.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":22,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"targetID","description":"The ID of the target user/message.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":18,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":31,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":42,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"webserverMode","description":"Whether the context is from a webserver.","access":"private","type":[[["boolean"]]],"meta":{"line":25,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":110,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"targetMember","description":"The target member of the interaction.\nWill be `null` if it's not from a user command.","readonly":true,"type":[[["undefined"," | "],["null"," | "],["ResolvedMember"]]],"meta":{"line":80,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"targetMessage","description":"The target message of the interaction.\nWill be `null` if it's not from a message command.","readonly":true,"type":[[["undefined"," | "],["null"," | "],["Message"]]],"meta":{"line":62,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"targetUser","description":"The target user of the interaction.\nWill be `null` if it's not from a user command.","readonly":true,"type":[[["undefined"," | "],["null"," | "],["User"]]],"meta":{"line":71,"file":"commandContext.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":217,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":199,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":148,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editOriginal","description":"Edits the original message.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":188,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"fetch","description":"Fetches a message.","params":[{"name":"messageID","description":"The ID of the message, defaults to the original message","optional":true,"default":"\"@original\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":35,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"promptPremium","description":"Creates a message that prompts the user for a premium subscription.","returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the message passed\n","meta":{"line":241,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponent","description":"Registers a component callback from the initial message.\nThis unregisters automatically when the context expires.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":267,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponentFrom","description":"Registers a component callback from a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":302,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerWildcardComponent","description":"Registers a wildcard component callback on a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":345,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":55,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":104,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendModal","description":"Sends a modal to the user.\nIf a callback is not defined, you are required to provide a custom ID in the options.\nIf a callback is defined, a custom ID will be generated if not defined.","params":[{"name":"options","description":"The message options","type":[[["ModalOptions"]]]},{"name":"callback","description":"The callback of the modal","optional":true,"type":[[["ModalRegisterCallback"]]]}],"returns":[[["Promise","<"],["string",">"]]],"returnsDescription":"The custom ID of the modal\n","meta":{"line":21,"file":"modalSendableContext.ts","path":"src/structures/interfaces"}},{"name":"unregisterComponent","description":"Unregisters a component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]},{"name":"message_id","description":"The message ID of the component to unregister, defaults to initial message ID if any","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":329,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterWildcardComponent","description":"Unregisters a component callback.","params":[{"name":"message_id","description":"The message ID of the component to unregister, defaults to the invoking message ID.","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":372,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"convertOptions","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]}],"returns":[[["{}"]]],"meta":{"line":86,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"getSubcommandArray","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":97,"file":"commandContext.ts","path":"src/structures/interfaces"}}],"meta":{"line":7,"file":"commandContext.ts","path":"src/structures/interfaces"}},{"name":"ComponentContext","description":"Represents an interaction context from a message component.","extends":["ModalSendableContext"],"construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data for the context.","type":[[["MessageComponentRequestData"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]},{"name":"useTimeout","description":"Whether to use the acknowledgement timeout.","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["ComponentContext"]]],"meta":{"line":21,"file":"componentContext.ts","path":"src/structures/interfaces"}},"props":[{"name":"appPermissions","description":"The permissions the application has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":37,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"attachments","description":"The resolved attachments of the interaction.","readonly":true,"default":"new Collection<string, AttachmentData>()","type":[[["Collection","<"],["string",", "],["AttachmentData",">"]]],"meta":{"line":52,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channel","description":"The channel that interaction was used in.","readonly":true,"type":[[["Channel"]]],"meta":{"line":33,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":48,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"componentType","description":"The type of component this interaction came from.","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":17,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"customID","description":"The ID of the component to identify its origin from.","readonly":true,"type":[[["string"]]],"meta":{"line":15,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"data","description":"The request data.","readonly":true,"type":[[["MessageComponentRequestData"]]],"meta":{"line":12,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":13,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"entitlements","description":"The entitlements the invoking user has.","readonly":true,"type":[[["Array","<"],["AppEntitlement",">"]]],"meta":{"line":39,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":23,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildLocale","description":"The guild's perferred locale, if invoked in a guild.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":27,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":11,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":35,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"locale","description":"The user's locale","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":25,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":29,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":44,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"message","description":"The message this interaction came from, will be partial for ephemeral messages.","readonly":true,"type":[[["Message"]]],"meta":{"line":21,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"messageID","description":"The original message ID, automatically set when editing/fetching original message.","type":[[["undefined"," | "],["string"]]],"meta":{"line":15,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"messages","description":"The resolved messages of the interaction.","readonly":true,"default":"new Collection<string, Message>()","type":[[["Collection","<"],["string",", "],["Message",">"]]],"meta":{"line":50,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":46,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":31,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":42,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"values","description":"The the values of the interaction, if the component was a SELECT.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":19,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":110,"file":"baseInteraction.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"acknowledge","description":"Acknowledges the interaction without replying.","returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the acknowledgement passed passed\n","meta":{"line":46,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":217,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":199,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":148,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editOriginal","description":"Edits the original message.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":188,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editParent","description":"Edits the message that the component interaction came from.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":68,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"fetch","description":"Fetches a message.","params":[{"name":"messageID","description":"The ID of the message, defaults to the original message","optional":true,"default":"\"@original\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":35,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"promptPremium","description":"Creates a message that prompts the user for a premium subscription.","returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the message passed\n","meta":{"line":241,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponent","description":"Registers a component callback from the initial message.\nThis unregisters automatically when the context expires.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":267,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponentFrom","description":"Registers a component callback from a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":302,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerWildcardComponent","description":"Registers a wildcard component callback on a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":345,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":55,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":104,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendModal","description":"Sends a modal to the user.\nIf a callback is not defined, you are required to provide a custom ID in the options.\nIf a callback is defined, a custom ID will be generated if not defined.","params":[{"name":"options","description":"The message options","type":[[["ModalOptions"]]]},{"name":"callback","description":"The callback of the modal","optional":true,"type":[[["ModalRegisterCallback"]]]}],"returns":[[["Promise","<"],["string",">"]]],"returnsDescription":"The custom ID of the modal\n","meta":{"line":21,"file":"modalSendableContext.ts","path":"src/structures/interfaces"}},{"name":"unregisterComponent","description":"Unregisters a component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]},{"name":"message_id","description":"The message ID of the component to unregister, defaults to initial message ID if any","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":329,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterWildcardComponent","description":"Unregisters a component callback.","params":[{"name":"message_id","description":"The message ID of the component to unregister, defaults to the invoking message ID.","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":372,"file":"messageInteraction.ts","path":"src/structures/interfaces"}}],"meta":{"line":10,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"MessageInteractionContext","description":"Represents a interaction context that handles messages.","extends":["BaseInteractionContext"],"construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data.","type":[[["any"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]}],"returns":[[["MessageInteractionContext"]]],"meta":{"line":19,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},"props":[{"name":"appPermissions","description":"The permissions the application has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":37,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"attachments","description":"The resolved attachments of the interaction.","readonly":true,"default":"new Collection<string, AttachmentData>()","type":[[["Collection","<"],["string",", "],["AttachmentData",">"]]],"meta":{"line":52,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channel","description":"The channel that interaction was used in.","readonly":true,"type":[[["Channel"]]],"meta":{"line":33,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":48,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":13,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"entitlements","description":"The entitlements the invoking user has.","readonly":true,"type":[[["Array","<"],["AppEntitlement",">"]]],"meta":{"line":39,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":23,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildLocale","description":"The guild's perferred locale, if invoked in a guild.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":27,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":11,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":35,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"locale","description":"The user's locale","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":25,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":29,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":44,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"messageID","description":"The original message ID, automatically set when editing/fetching original message.","type":[[["undefined"," | "],["string"]]],"meta":{"line":15,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"messages","description":"The resolved messages of the interaction.","readonly":true,"default":"new Collection<string, Message>()","type":[[["Collection","<"],["string",", "],["Message",">"]]],"meta":{"line":50,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":46,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":31,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":42,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":110,"file":"baseInteraction.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":217,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":199,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":148,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editOriginal","description":"Edits the original message.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":188,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"fetch","description":"Fetches a message.","params":[{"name":"messageID","description":"The ID of the message, defaults to the original message","optional":true,"default":"\"@original\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":35,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"promptPremium","description":"Creates a message that prompts the user for a premium subscription.","returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the message passed\n","meta":{"line":241,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponent","description":"Registers a component callback from the initial message.\nThis unregisters automatically when the context expires.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":267,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponentFrom","description":"Registers a component callback from a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":302,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerWildcardComponent","description":"Registers a wildcard component callback on a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":345,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":55,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":104,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterComponent","description":"Unregisters a component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]},{"name":"message_id","description":"The message ID of the component to unregister, defaults to initial message ID if any","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":329,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterWildcardComponent","description":"Unregisters a component callback.","params":[{"name":"message_id","description":"The message ID of the component to unregister, defaults to the invoking message ID.","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":372,"file":"messageInteraction.ts","path":"src/structures/interfaces"}}],"meta":{"line":9,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"ModalInteractionContext","description":"Represents an interaction context from a modal submission.","extends":["MessageInteractionContext"],"construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data for the context.","type":[[["ModalSubmitRequestData"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]},{"name":"useTimeout","description":"Whether to use the deferral timeout.","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["ModalInteractionContext"]]],"meta":{"line":23,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}},"props":[{"name":"appPermissions","description":"The permissions the application has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":37,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"attachments","description":"The resolved attachments of the interaction.","readonly":true,"default":"new Collection<string, AttachmentData>()","type":[[["Collection","<"],["string",", "],["AttachmentData",">"]]],"meta":{"line":52,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channel","description":"The channel that interaction was used in.","readonly":true,"type":[[["Channel"]]],"meta":{"line":33,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":48,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"customID","description":"The ID of the component to identify its origin from.","readonly":true,"type":[[["string"]]],"meta":{"line":18,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}},{"name":"data","description":"The request data.","readonly":true,"type":[[["ModalSubmitRequestData"]]],"meta":{"line":16,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":13,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"entitlements","description":"The entitlements the invoking user has.","readonly":true,"type":[[["Array","<"],["AppEntitlement",">"]]],"meta":{"line":39,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":23,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildLocale","description":"The guild's perferred locale, if invoked in a guild.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":27,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":11,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":35,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"locale","description":"The user's locale","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":25,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":29,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":44,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"message","description":"The message this interaction came from, will be partial for ephemeral messages.","readonly":true,"type":[[["Message"]]],"meta":{"line":20,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}},{"name":"messageID","description":"The original message ID, automatically set when editing/fetching original message.","type":[[["undefined"," | "],["string"]]],"meta":{"line":15,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"messages","description":"The resolved messages of the interaction.","readonly":true,"default":"new Collection<string, Message>()","type":[[["Collection","<"],["string",", "],["Message",">"]]],"meta":{"line":50,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":46,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":31,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":42,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"values","description":"The values defined in the modal submission.","readonly":true,"type":[[["{}"]]],"meta":{"line":23,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":110,"file":"baseInteraction.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"acknowledge","description":"Acknowledges the interaction without replying.","returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the acknowledgement passed\n","meta":{"line":59,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}},{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":217,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":199,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":148,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editOriginal","description":"Edits the original message.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":188,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editParent","params":[{"name":"content","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":81,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}},{"name":"fetch","description":"Fetches a message.","params":[{"name":"messageID","description":"The ID of the message, defaults to the original message","optional":true,"default":"\"@original\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":35,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"promptPremium","description":"Creates a message that prompts the user for a premium subscription.","returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the message passed\n","meta":{"line":241,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponent","description":"Registers a component callback from the initial message.\nThis unregisters automatically when the context expires.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":267,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponentFrom","description":"Registers a component callback from a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":302,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerWildcardComponent","description":"Registers a wildcard component callback on a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":345,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":55,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":104,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterComponent","description":"Unregisters a component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]},{"name":"message_id","description":"The message ID of the component to unregister, defaults to initial message ID if any","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":329,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterWildcardComponent","description":"Unregisters a component callback.","params":[{"name":"message_id","description":"The message ID of the component to unregister, defaults to the invoking message ID.","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":372,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"convertComponents","scope":"static","params":[{"name":"components","type":[[["Array","<"],["ComponentActionRow",">"]]]}],"returns":[[["{}"]]],"meta":{"line":43,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}}],"meta":{"line":14,"file":"modalInteractionContext.ts","path":"src/structures/interfaces"}},{"name":"ModalSendableContext","description":"Represents an interaction that can send modals.","extends":["MessageInteractionContext"],"construct":{"name":"constructor","params":[{"name":"creator","type":[[["SlashCreator"]]]},{"name":"data","type":[[["any"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["ModalSendableContext"]]],"meta":{"line":8,"file":"modalSendableContext.ts","path":"src/structures/interfaces"}},"props":[{"name":"appPermissions","description":"The permissions the application has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":37,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"attachments","description":"The resolved attachments of the interaction.","readonly":true,"default":"new Collection<string, AttachmentData>()","type":[[["Collection","<"],["string",", "],["AttachmentData",">"]]],"meta":{"line":52,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channel","description":"The channel that interaction was used in.","readonly":true,"type":[[["Channel"]]],"meta":{"line":33,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":48,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":13,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"entitlements","description":"The entitlements the invoking user has.","readonly":true,"type":[[["Array","<"],["AppEntitlement",">"]]],"meta":{"line":39,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":23,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildLocale","description":"The guild's perferred locale, if invoked in a guild.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":27,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":11,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":35,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"locale","description":"The user's locale","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":25,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":29,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":44,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"messageID","description":"The original message ID, automatically set when editing/fetching original message.","type":[[["undefined"," | "],["string"]]],"meta":{"line":15,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"messages","description":"The resolved messages of the interaction.","readonly":true,"default":"new Collection<string, Message>()","type":[[["Collection","<"],["string",", "],["Message",">"]]],"meta":{"line":50,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":46,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":31,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":42,"file":"baseInteraction.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":110,"file":"baseInteraction.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":217,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":199,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":148,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editOriginal","description":"Edits the original message.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":188,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"fetch","description":"Fetches a message.","params":[{"name":"messageID","description":"The ID of the message, defaults to the original message","optional":true,"default":"\"@original\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":35,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"promptPremium","description":"Creates a message that prompts the user for a premium subscription.","returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the message passed\n","meta":{"line":241,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponent","description":"Registers a component callback from the initial message.\nThis unregisters automatically when the context expires.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":267,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponentFrom","description":"Registers a component callback from a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":302,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerWildcardComponent","description":"Registers a wildcard component callback on a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]},{"name":"expiration","description":"The expiration time of the callback in milliseconds. Use null for no expiration (Although, in this case, global components might be more consistent).","optional":true,"default":"1000 * 60 * 15","type":[[["number"]]]},{"name":"onExpired","description":"A function to be called when the component expires.","optional":true,"type":[[["undefined"," | (..."],["args",": "],["unknown","[]) => "],["void"]]]}],"returns":[[["void"]]],"meta":{"line":345,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":55,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":104,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendModal","description":"Sends a modal to the user.\nIf a callback is not defined, you are required to provide a custom ID in the options.\nIf a callback is defined, a custom ID will be generated if not defined.","params":[{"name":"options","description":"The message options","type":[[["ModalOptions"]]]},{"name":"callback","description":"The callback of the modal","optional":true,"type":[[["ModalRegisterCallback"]]]}],"returns":[[["Promise","<"],["string",">"]]],"returnsDescription":"The custom ID of the modal\n","meta":{"line":21,"file":"modalSendableContext.ts","path":"src/structures/interfaces"}},{"name":"unregisterComponent","description":"Unregisters a component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]},{"name":"message_id","description":"The message ID of the component to unregister, defaults to initial message ID if any","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":329,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterWildcardComponent","description":"Unregisters a component callback.","params":[{"name":"message_id","description":"The message ID of the component to unregister, defaults to the invoking message ID.","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":372,"file":"messageInteraction.ts","path":"src/structures/interfaces"}}],"meta":{"line":8,"file":"modalSendableContext.ts","path":"src/structures/interfaces"}},{"name":"Member","description":"Represents a Discord guild member.","extends":["ResolvedMember"],"construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["CommandMember"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]},{"name":"guildID","type":[[["string"]]]}],"returns":[[["Member"]]],"meta":{"line":14,"file":"member.ts","path":"src/structures"}},"props":[{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":14,"file":"member.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":13,"file":"member.ts","path":"src/structures"}},{"name":"avatar","description":"The member's guild avatar hash","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":32,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"communicationDisabledUntil","description":"The timestamp when the member's timeout will expire","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":26,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"deaf","description":"Whether the user is deafened in voice channels","readonly":true,"type":[[["boolean"]]],"meta":{"line":11,"file":"member.ts","path":"src/structures"}},{"name":"flags","description":"The guild member flags represented as a bit set","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":28,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"guildID","description":"The ID of the guild this member belongs to.","readonly":true,"type":[[["string"]]],"meta":{"line":36,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"id","description":"The member's ID","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"joinedAt","description":"The timestamp the member joined the guild","readonly":true,"type":[[["number"]]],"meta":{"line":20,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mute","description":"Whether the user is muted in voice channels","readonly":true,"type":[[["boolean"]]],"meta":{"line":9,"file":"member.ts","path":"src/structures"}},{"name":"nick","description":"The member's nickname","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":18,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"pending","description":"Whether the member is pending verification","readonly":true,"type":[[["boolean"]]],"meta":{"line":30,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"premiumSince","description":"The time of when this member boosted the server.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":24,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"roles","description":"An array of role IDs that the user has.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":22,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"user","description":"The user object for this member","readonly":true,"type":[[["User"]]],"meta":{"line":34,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"avatarURL","description":"The URL to the member's avatar.","readonly":true,"type":[[["string"]]],"meta":{"line":81,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"displayName","description":"The display name for this member.","readonly":true,"type":[[["string"]]],"meta":{"line":76,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this member.","readonly":true,"type":[[["string"]]],"meta":{"line":66,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":28,"file":"member.ts","path":"src/structures"}}],"methods":[{"name":"dynamicAvatarURL","description":"Get the member's avatar with the given format and size.\nIf the member does not have a server avatar, their user avatar is used instead.","params":[{"name":"format","description":"The format of the avatar","optional":true,"type":[[["ImageFormat"]]]},{"name":"size","description":"The size of the avatar","optional":true,"type":[[["undefined"," | "],["number"]]]}],"returns":[[["string"]]],"meta":{"line":91,"file":"resolvedMember.ts","path":"src/structures"}}],"meta":{"line":7,"file":"member.ts","path":"src/structures"}},{"name":"Message","description":"Represents a Discord message.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the message","type":[[["MessageData"]]]},{"name":"creator","type":[[["SlashCreator"]]]},{"name":"ctx","description":"The instantiating context","optional":true,"type":[[["MessageInteractionContext"]]]}],"returns":[[["Message"]]],"meta":{"line":49,"file":"message.ts","path":"src/structures"}},"props":[{"name":"_ctx","description":"The context that created the message class","access":"private","readonly":true,"type":[[["MessageInteractionContext"]]],"meta":{"line":49,"file":"message.ts","path":"src/structures"}},{"name":"attachments","description":"The message's attachments","readonly":true,"type":[[["Array","<"],["MessageAttachment",">"]]],"meta":{"line":22,"file":"message.ts","path":"src/structures"}},{"name":"author","description":"The author of the message","readonly":true,"type":[[["User"]]],"meta":{"line":20,"file":"message.ts","path":"src/structures"}},{"name":"channelID","description":"The ID of the channel the message is in","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"message.ts","path":"src/structures"}},{"name":"components","description":"The message's components","readonly":true,"type":[[["Array","<"],["AnyComponent",">"]]],"meta":{"line":18,"file":"message.ts","path":"src/structures"}},{"name":"content","description":"The content of the message","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"message.ts","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp of when the message was last edited","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":38,"file":"message.ts","path":"src/structures"}},{"name":"embeds","description":"The message's embeds","readonly":true,"type":[[["Array","<"],["MessageEmbed",">"]]],"meta":{"line":24,"file":"message.ts","path":"src/structures"}},{"name":"flags","description":"The message's flags","readonly":true,"type":[[["number"]]],"meta":{"line":40,"file":"message.ts","path":"src/structures"}},{"name":"id","description":"The message's ID","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"message.ts","path":"src/structures"}},{"name":"interaction","description":"The interaction this message is apart of","readonly":true,"type":[[["MessageInteraction"]]],"meta":{"line":46,"file":"message.ts","path":"src/structures"}},{"name":"mentionedEveryone","description":"Whether the message mentioned everyone/here","readonly":true,"type":[[["boolean"]]],"meta":{"line":30,"file":"message.ts","path":"src/structures"}},{"name":"mentions","description":"The message's user mentions","readonly":true,"type":[[["Array","<"],["User",">"]]],"meta":{"line":26,"file":"message.ts","path":"src/structures"}},{"name":"messageReference","description":"The message that this message is referencing","readonly":true,"type":[[["MessageReference"]]],"meta":{"line":42,"file":"message.ts","path":"src/structures"}},{"name":"pinned","description":"Whether the message is pinned","readonly":true,"type":[[["boolean"]]],"meta":{"line":34,"file":"message.ts","path":"src/structures"}},{"name":"roleMentions","description":"The message's role mentions","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":28,"file":"message.ts","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of the message","readonly":true,"type":[[["number"]]],"meta":{"line":36,"file":"message.ts","path":"src/structures"}},{"name":"tts","description":"Whether the message used TTS","readonly":true,"type":[[["boolean"]]],"meta":{"line":32,"file":"message.ts","path":"src/structures"}},{"name":"type","description":"The message type","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"message.ts","path":"src/structures"}},{"name":"webhookID","description":"The message's webhook ID","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"message.ts","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this message.","returns":[[["Promise","<"],["any",">"]]],"meta":{"line":101,"file":"message.ts","path":"src/structures"}},{"name":"edit","description":"Edits this message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":95,"file":"message.ts","path":"src/structures"}}],"meta":{"line":8,"file":"message.ts","path":"src/structures"}},{"name":"Permissions","description":"Data structure that makes it easy to interact with a permission bitfield.\nAll {@link Member}s have a set of permissions.","extends":["BitField"],"construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["Permissions"]]],"meta":{"line":56,"file":"permissions.ts","path":"src/structures"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":4,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"Permission flags. Check the source of this property for available permissions.","scope":"static","default":"FLAGS","type":[[["{}"]]],"meta":{"line":56,"file":"permissions.ts","path":"src/structures"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":15,"file":"bitfield.ts","path":"src/util"}},{"name":"isBigInt","access":"private","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":28,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":37,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":46,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":58,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":68,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":79,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]},{"name":"useBigInt","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":108,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":54,"file":"permissions.ts","path":"src/structures"}},{"name":"ResolvedMember","description":"Represents a resolved member object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["ResolvedMemberData"]]]},{"name":"userData","description":"The data for the member's user","type":[[["CommandUser"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]},{"name":"guildID","description":"The ID of the guild this member belongs to","type":[[["string"]]]}],"returns":[[["ResolvedMember"]]],"meta":{"line":39,"file":"resolvedMember.ts","path":"src/structures"}},"props":[{"name":"_creator","description":"The creator of the member class.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":39,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"avatar","description":"The member's guild avatar hash","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":32,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"communicationDisabledUntil","description":"The timestamp when the member's timeout will expire","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":26,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"flags","description":"The guild member flags represented as a bit set","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":28,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"guildID","description":"The ID of the guild this member belongs to.","readonly":true,"type":[[["string"]]],"meta":{"line":36,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"id","description":"The member's ID","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"joinedAt","description":"The timestamp the member joined the guild","readonly":true,"type":[[["number"]]],"meta":{"line":20,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"nick","description":"The member's nickname","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":18,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"pending","description":"Whether the member is pending verification","readonly":true,"type":[[["boolean"]]],"meta":{"line":30,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"premiumSince","description":"The time of when this member boosted the server.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":24,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"roles","description":"An array of role IDs that the user has.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":22,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"user","description":"The user object for this member","readonly":true,"type":[[["User"]]],"meta":{"line":34,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"avatarURL","description":"The URL to the member's avatar.","readonly":true,"type":[[["string"]]],"meta":{"line":81,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"displayName","description":"The display name for this member.","readonly":true,"type":[[["string"]]],"meta":{"line":76,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this member.","readonly":true,"type":[[["string"]]],"meta":{"line":66,"file":"resolvedMember.ts","path":"src/structures"}}],"methods":[{"name":"dynamicAvatarURL","description":"Get the member's avatar with the given format and size.\nIf the member does not have a server avatar, their user avatar is used instead.","params":[{"name":"format","description":"The format of the avatar","optional":true,"type":[[["ImageFormat"]]]},{"name":"size","description":"The size of the avatar","optional":true,"type":[[["undefined"," | "],["number"]]]}],"returns":[[["string"]]],"meta":{"line":91,"file":"resolvedMember.ts","path":"src/structures"}}],"meta":{"line":14,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"Role","description":"Represents a resolved role object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["ResolvedRole"]]]},{"name":"creator","type":[[["SlashCreator"]]]}],"returns":[[["Role"]]],"meta":{"line":40,"file":"role.ts","path":"src/structures"}},"props":[{"name":"_creator","description":"The creator of the role class.","access":"private","type":[[["SlashCreator"]]],"meta":{"line":37,"file":"role.ts","path":"src/structures"}},{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":40,"file":"role.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":39,"file":"role.ts","path":"src/structures"}},{"name":"color","description":"The role's color integer","readonly":true,"type":[[["number"]]],"meta":{"line":22,"file":"role.ts","path":"src/structures"}},{"name":"hoist","description":"Whether the role is being hoisted","readonly":true,"type":[[["boolean"]]],"meta":{"line":24,"file":"role.ts","path":"src/structures"}},{"name":"icon","description":"The role icon hash","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":26,"file":"role.ts","path":"src/structures"}},{"name":"id","description":"The role's ID","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"role.ts","path":"src/structures"}},{"name":"managed","description":"Whether the role is being managed by an application","readonly":true,"type":[[["boolean"]]],"meta":{"line":28,"file":"role.ts","path":"src/structures"}},{"name":"mentionable","description":"Whether the role is mentionable by everyone","readonly":true,"type":[[["boolean"]]],"meta":{"line":30,"file":"role.ts","path":"src/structures"}},{"name":"name","description":"The role's name","readonly":true,"type":[[["string"]]],"meta":{"line":18,"file":"role.ts","path":"src/structures"}},{"name":"position","description":"The role's position","readonly":true,"type":[[["number"]]],"meta":{"line":20,"file":"role.ts","path":"src/structures"}},{"name":"tags","description":"The role's tags","readonly":true,"type":[[["RoleTags"]]],"meta":{"line":34,"file":"role.ts","path":"src/structures"}},{"name":"unicodeEmoji","description":"The role unicode emoji","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":32,"file":"role.ts","path":"src/structures"}},{"name":"colorHex","description":"The role's color in hexadecimal, with a leading hashtag","readonly":true,"type":[[["string"]]],"meta":{"line":90,"file":"role.ts","path":"src/structures"}},{"name":"iconURL","description":"The URL of the role icon.","readonly":true,"type":[[["null"," | "],["string"]]],"meta":{"line":62,"file":"role.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this role.","readonly":true,"type":[[["string"]]],"meta":{"line":85,"file":"role.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":95,"file":"role.ts","path":"src/structures"}}],"methods":[{"name":"dynamicIconURL","description":"Get the role's icon with the given format and size.","params":[{"name":"format","description":"The format of the icon","optional":true,"type":[[["ImageFormat"]]]},{"name":"size","description":"The size of the icon","optional":true,"type":[[["undefined"," | "],["number"]]]}],"returns":[[["null"," | "],["string"]]],"meta":{"line":71,"file":"role.ts","path":"src/structures"}}],"meta":{"line":14,"file":"role.ts","path":"src/structures"}},{"name":"User","description":"Represents a user on Discord.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the user","type":[[["UserObject"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]}],"returns":[[["User"]]],"meta":{"line":26,"file":"user.ts","path":"src/structures"}},"props":[{"name":"_creator","description":"The creator of the user class.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":23,"file":"user.ts","path":"src/structures"}},{"name":"_flags","access":"private","type":[[["number"]]],"meta":{"line":26,"file":"user.ts","path":"src/structures"}},{"name":"_flagsBitfield","access":"private","type":[[["UserFlags"]]],"meta":{"line":25,"file":"user.ts","path":"src/structures"}},{"name":"avatar","description":"The user's avatar hash.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":16,"file":"user.ts","path":"src/structures"}},{"name":"avatarDecoration","description":"The user's avatar decoration hash.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":18,"file":"user.ts","path":"src/structures"}},{"name":"bot","description":"Whether the user is a bot.","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"user.ts","path":"src/structures"}},{"name":"discriminator","description":"The user's discriminator.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"user.ts","path":"src/structures"}},{"name":"globalName","description":"The user's display name.","readonly":true,"type":[[["string"," | "],["null"]]],"meta":{"line":12,"file":"user.ts","path":"src/structures"}},{"name":"id","description":"The user's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"user.ts","path":"src/structures"}},{"name":"username","description":"The user's username.","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"user.ts","path":"src/structures"}},{"name":"avatarDecorationURL","description":"The URL of the user's avatar decoration.","readonly":true,"type":[[["null"," | "],["string"]]],"meta":{"line":93,"file":"user.ts","path":"src/structures"}},{"name":"avatarURL","description":"The URL of the user's avatar.","readonly":true,"type":[[["string"]]],"meta":{"line":73,"file":"user.ts","path":"src/structures"}},{"name":"defaultAvatar","description":"The hash for the default avatar of a user if there is no avatar set.","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"user.ts","path":"src/structures"}},{"name":"defaultAvatarURL","description":"The URL of the user's default avatar.","readonly":true,"type":[[["string"]]],"meta":{"line":68,"file":"user.ts","path":"src/structures"}},{"name":"flags","description":"The public flags for the user.","readonly":true,"type":[[["UserFlags"]]],"meta":{"line":46,"file":"user.ts","path":"src/structures"}},{"name":"mention","description":"A string that mentions the user.","readonly":true,"type":[[["string"]]],"meta":{"line":52,"file":"user.ts","path":"src/structures"}}],"methods":[{"name":"dynamicAvatarDecorationURL","description":"Get the user's avatar decoration with the given format and size.","params":[{"name":"format","description":"The format of the avatar","optional":true,"type":[[["ImageFormat"]]]},{"name":"size","description":"The size of the avatar","optional":true,"type":[[["undefined"," | "],["number"]]]}],"returns":[[["null"," | "],["string"]]],"meta":{"line":102,"file":"user.ts","path":"src/structures"}},{"name":"dynamicAvatarURL","description":"Get the user's avatar with the given format and size.","params":[{"name":"format","description":"The format of the avatar","optional":true,"type":[[["ImageFormat"]]]},{"name":"size","description":"The size of the avatar","optional":true,"type":[[["undefined"," | "],["number"]]]}],"returns":[[["string"]]],"meta":{"line":82,"file":"user.ts","path":"src/structures"}}],"meta":{"line":6,"file":"user.ts","path":"src/structures"}},{"name":"UserFlags","description":"Data structure that makes it easy to interact with a {@link User#flags} bitfield.","extends":["BitField"],"construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]},{"name":"useBigInt","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["UserFlags"]]],"meta":{"line":6,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":4,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"The flags for users. Check the source of this property for available flags.","scope":"static","default":"FLAGS","type":[[["{}"]]],"meta":{"line":27,"file":"userFlags.ts","path":"src/structures"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":15,"file":"bitfield.ts","path":"src/util"}},{"name":"isBigInt","access":"private","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":28,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":37,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":46,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":58,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":68,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":79,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]},{"name":"useBigInt","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":108,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":25,"file":"userFlags.ts","path":"src/structures"}},{"name":"BitField","description":"Data structure that makes it easy to interact with a bitfield.","construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]},{"name":"useBigInt","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["BitField"]]],"meta":{"line":6,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":4,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"The flags for this bitfield.","scope":"static","type":[[["{}"]]],"meta":{"line":6,"file":"bitfield.ts","path":"src/util"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":15,"file":"bitfield.ts","path":"src/util"}},{"name":"isBigInt","access":"private","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":28,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":37,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":46,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":58,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":68,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":79,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]},{"name":"useBigInt","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":108,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":2,"file":"bitfield.ts","path":"src/util"}},{"name":"Collection","description":"A map with a subset of extra features from [@discordjs/collection](https://npm.im/@discordjs/collection).","extends":["Map<K, V>"],"props":[{"name":"[Symbol.toStringTag]","readonly":true,"type":[[["string"]]],"meta":{"line":135,"file":"lib.es2015.symbol.wellknown.d.ts","path":"node_modules/typescript/lib"}},{"name":"size","readonly":true,"type":[[["number"]]],"meta":{"line":28,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"Map","scope":"static","type":[[["MapConstructor"]]],"meta":{"line":36,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}}],"methods":[{"name":"[Symbol.iterator]","description":"Returns an iterable of entries in the map.","returns":[[["IterableIterator","<["],["K",", "],["V","]>"]]],"meta":{"line":121,"file":"lib.es2015.iterable.d.ts","path":"node_modules/typescript/lib"}},{"name":"clear","returns":[[["void"]]],"meta":{"line":22,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","see":[],"examples":["const newColl = someColl.clone();\n"],"emits":[],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":224,"file":"collection.ts","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","see":[],"examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n"],"emits":[],"params":[{"name":"collections","description":"Collections to merge","type":[[["Array","<"],["Collection","<"],["K",", "],["V",">>"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":234,"file":"collection.ts","path":"src/util"}},{"name":"delete","params":[{"name":"key","type":[[["K"]]]}],"returns":[[["boolean"]]],"meta":{"line":23,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"entries","description":"Returns an iterable of key, value pairs for every entry in the map.","returns":[[["IterableIterator","<["],["K",", "],["V","]>"]]],"meta":{"line":126,"file":"lib.es2015.iterable.d.ts","path":"node_modules/typescript/lib"}},{"name":"equals","description":"Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection","<"],["K",", "],["V",">"]]]}],"returns":[[["boolean"]]],"returnsDescription":"Whether the collections have identical contents\n","meta":{"line":249,"file":"collection.ts","path":"src/util"}},{"name":"every","description":"Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","see":[],"examples":["collection.every(user => !user.bot);\n"],"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["this",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["this"," "],["is"," "],["Collection","<"],["K2",", "],["V",">"]]],"meta":{"line":166,"file":"collection.ts","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","see":[],"examples":["collection.filter(user => user.username === 'Bob');\n"],"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["this",") => "],["key"," "],["is"," "],["K2"]]]}],"returns":[[["Collection","<"],["K2",", "],["V",">"]]],"meta":{"line":62,"file":"collection.ts","path":"src/util"}},{"name":"find","description":"Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).","see":[],"examples":["collection.find(user => user.username === 'Bob');\n"],"emits":[],"params":[{"name":"fn","description":"The function to test with (should return boolean)","type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["this",") => "],["value"," "],["is"," "],["V2"]]]}],"returns":[[["V2"," | "],["undefined"]]],"meta":{"line":91,"file":"collection.ts","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","returns":[[["V"," | "],["undefined"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the end if\namount is negative\n","meta":{"line":11,"file":"collection.ts","path":"src/util"}},{"name":"forEach","params":[{"name":"callbackfn","type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["map",": "],["Map","<"],["K",", "],["V",">) => "],["void"]]]},{"name":"thisArg","optional":true,"type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":24,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"get","params":[{"name":"key","type":[[["K"]]]}],"returns":[[["V"," | "],["undefined"]]],"meta":{"line":25,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"has","params":[{"name":"key","type":[[["K"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"keys","description":"Returns an iterable of keys in the map","returns":[[["IterableIterator","<"],["K",">"]]],"meta":{"line":131,"file":"lib.es2015.iterable.d.ts","path":"node_modules/typescript/lib"}},{"name":"last","description":"Obtains the last value(s) in this collection.","returns":[[["V"," | "],["undefined"]]],"returnsDescription":"A single value if no amount is provided or an array of values, starting from the start if\namount is negative\n","meta":{"line":27,"file":"collection.ts","path":"src/util"}},{"name":"map","description":"Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","see":[],"examples":["collection.map(user => user.tag);\n"],"emits":[],"params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["this",") => "],["T"]]]}],"returns":[[["Array","<"],["T",">"]]],"meta":{"line":113,"file":"collection.ts","path":"src/util"}},{"name":"random","description":"Obtains unique random value(s) from this collection.","returns":[[["V"]]],"returnsDescription":"A single value if no amount is provided or an array of values\n","meta":{"line":42,"file":"collection.ts","path":"src/util"}},{"name":"reduce","description":"Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","see":[],"examples":["collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n"],"emits":[],"params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["("],["accumulator",": "],["T",", "],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["this",") => "],["T"]]]},{"name":"initialValue","optional":true,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":194,"file":"collection.ts","path":"src/util"}},{"name":"set","params":[{"name":"key","type":[[["K"]]]},{"name":"value","type":[[["V"]]]}],"returns":[[["this"]]],"meta":{"line":27,"file":"lib.es2015.collection.d.ts","path":"node_modules/typescript/lib"}},{"name":"some","description":"Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","see":[],"examples":["collection.some(user => user.discriminator === '0000');\n"],"emits":[],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["this",") => "],["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":132,"file":"collection.ts","path":"src/util"}},{"name":"sweep","description":"Removes items that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["this",") => "],["boolean"]]]}],"returns":[[["number"]]],"returnsDescription":"The number of removed entries\n","meta":{"line":148,"file":"collection.ts","path":"src/util"}},{"name":"values","description":"Returns an iterable of values in the map","returns":[[["IterableIterator","<"],["V",">"]]],"meta":{"line":136,"file":"lib.es2015.iterable.d.ts","path":"node_modules/typescript/lib"}}],"meta":{"line":4,"file":"collection.ts","path":"src/util"}},{"name":"MultipartData","props":[{"name":"boundary","default":"\"----------------SlashCreate\"","type":[[["string"]]],"meta":{"line":2,"file":"multipartData.ts","path":"src/util"}},{"name":"bufs","default":"[]","type":[[["Array","<"],["Buffer",">"]]],"meta":{"line":3,"file":"multipartData.ts","path":"src/util"}}],"methods":[{"name":"attach","params":[{"name":"fieldName","type":[[["string"]]]},{"name":"data","type":[[["any"]]]},{"name":"filename","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["void"]]],"meta":{"line":5,"file":"multipartData.ts","path":"src/util"}},{"name":"finish","returns":[[["Array","<"],["Buffer",">"]]],"meta":{"line":23,"file":"multipartData.ts","path":"src/util"}}],"meta":{"line":1,"file":"multipartData.ts","path":"src/util"}},{"name":"RequestHandler","description":"The request handler for REST requests.","access":"private","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]}],"returns":[[["RequestHandler"]]],"meta":{"line":37,"file":"requestHandler.ts","path":"src/util"}},"props":[{"name":"_creator","description":"The creator that initialized the handler.","type":[[["SlashCreator"]]],"meta":{"line":37,"file":"requestHandler.ts","path":"src/util"}},{"name":"agent","description":"TheHTTP agent used in the request handler.","readonly":true,"type":[[["HTTPS","."],["Agent"]]],"meta":{"line":28,"file":"requestHandler.ts","path":"src/util"}},{"name":"baseURL","description":"The base URL for all requests.","readonly":true,"default":"API_BASE_URL","type":[[["string"]]],"meta":{"line":20,"file":"requestHandler.ts","path":"src/util"}},{"name":"globalBlock","description":"Whether the handler is globally blocked.","default":"false","type":[[["boolean"]]],"meta":{"line":32,"file":"requestHandler.ts","path":"src/util"}},{"name":"latencyRef","description":"The latency reference for the handler.","readonly":true,"type":[[["LatencyRef"]]],"meta":{"line":30,"file":"requestHandler.ts","path":"src/util"}},{"name":"ratelimits","description":"The ratelimits per route.","readonly":true,"type":[[["{}"]]],"meta":{"line":24,"file":"requestHandler.ts","path":"src/util"}},{"name":"readyQueue","description":"The request queue.","readonly":true,"default":"[]","type":[[["Array","<"],["any",">"]]],"meta":{"line":34,"file":"requestHandler.ts","path":"src/util"}},{"name":"requestTimeout","description":"The amount of time a request will timeout.","readonly":true,"type":[[["number"]]],"meta":{"line":26,"file":"requestHandler.ts","path":"src/util"}},{"name":"userAgent","description":"The user agent for all requests.","readonly":true,"default":"USER_AGENT","type":[[["string"]]],"meta":{"line":22,"file":"requestHandler.ts","path":"src/util"}}],"methods":[{"name":"globalUnblock","description":"Unblocks the request handler.","returns":[[["void"]]],"meta":{"line":55,"file":"requestHandler.ts","path":"src/util"}},{"name":"request","description":"Make an API request","params":[{"name":"method","description":"Uppercase HTTP method","type":[[["string"]]]},{"name":"url","description":"URL of the endpoint","type":[[["string"]]]},{"name":"auth","description":"Whether to add the Authorization header and token or not","optional":true,"default":"true","type":[[["boolean"]]]},{"name":"body","description":"Request payload","optional":true,"type":[[["any"]]]},{"name":"file","description":"The file(s) to send","optional":true,"type":[[["any"]]]},{"name":"reason","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"_route","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"short","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":70,"file":"requestHandler.ts","path":"src/util"}},{"name":"routefy","params":[{"name":"url","type":[[["string"]]]},{"name":"method","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":420,"file":"requestHandler.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":435,"file":"requestHandler.ts","path":"src/util"}}],"meta":{"line":18,"file":"requestHandler.ts","path":"src/util"}},{"name":"SequentialBucket","description":"Ratelimit requests and release in sequence.","access":"private","construct":{"name":"constructor","params":[{"name":"limit","description":"The max number of tokens the bucket can consume per interval","type":[[["number"]]]},{"name":"latencyRef","description":"The latency reference","optional":true,"default":"{ latency: 0 }","type":[[["MinimalLatencyRef"]]]}],"returns":[[["SequentialBucket"]]],"meta":{"line":18,"file":"sequentialBucket.ts","path":"src/util"}},"props":[{"name":"_queue","access":"private","default":"[]","type":[[["Array","<"],["CallbackFunction",">"]]],"meta":{"line":16,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"last","access":"private","type":[[["undefined"," | "],["number"]]],"meta":{"line":18,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"latencyRef","access":"private","type":[[["MinimalLatencyRef"]]],"meta":{"line":15,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"limit","description":"How many tokens the bucket can consume in the current interval.","type":[[["number"]]],"meta":{"line":7,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"processing","description":"Whether the queue is being processed.","default":"false","type":[[["boolean"]]],"meta":{"line":9,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"processingTimeout","access":"private","type":[[["any"]]],"meta":{"line":17,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"remaining","description":"How many tokens the bucket has left in the current interval.","type":[[["number"]]],"meta":{"line":11,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"reset","description":"Timestamp of next reset.","default":"0","type":[[["number"]]],"meta":{"line":13,"file":"sequentialBucket.ts","path":"src/util"}}],"methods":[{"name":"check","description":"Checks the bucket and runs through the functions.","params":[{"name":"override","description":"Whether to override the processing property","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":33,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"queue","description":"Queue something in the SequentialBucket","params":[{"name":"func","description":"A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work","type":[[["CallbackFunction"]]]},{"name":"short","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":85,"file":"sequentialBucket.ts","path":"src/util"}}],"meta":{"line":5,"file":"sequentialBucket.ts","path":"src/util"}}],"typedefs":[{"name":"CommandPermissions","description":"The command permission for a {@link SlashCommand}.\nThe object is a guild ID mapped to an array of {@link ApplicationCommandPermissions}.","see":[],"meta":{"line":408,"file":"command.ts","path":"src"}},{"name":"SlashCommandOptions","description":"The options for a {@link SlashCommand}.","meta":{"line":353,"file":"command.ts","path":"src"},"props":[{"name":"defaultPermission","description":"Whether to enable this command for everyone by default. `true` by default.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"deferEphemeral","description":"Whether responses from this command should defer ephemeral messages.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the command.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"descriptionLocalizations","description":"The localiztions for the command description.","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"dmPermission","description":"Whether to enable this command in direct messages. `true` by default.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"forcePermissions","description":"Whether to check the member's permission within command execution, regardless of admin-set command permissions.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"guildIDs","description":"The guild ID(s) that this command will be assigned to.","optional":true,"type":[[["string"," | "],["Array","<"],["string",">"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"nameLocalizations","description":"The localiztions for the command name.","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"nsfw","description":"Whether this command is age-restricted. `false` by default.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"options","description":"The command's options.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"permissions","description":"The command permissions per guild","optional":true,"type":[[["CommandPermissions"]]]},{"name":"requiredPermissions","description":"The default member permissions required to use the command. Use an empty array to resemble a `false` default permission.","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"throttling","description":"The throttling options for the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"type","description":"The type of command this is. Defaults to chat input, or a regular slash command.","optional":true,"type":[[["ApplicationCommandType"]]]},{"name":"unknown","description":"Whether this command is used for unknown commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"ThrottleObject","access":"private","meta":{"line":421,"file":"command.ts","path":"src"},"props":[{"name":"start","type":[[["number"]]]},{"name":"timeout","type":[[["any"]]]},{"name":"usages","type":[[["number"]]]}]},{"name":"ThrottlingOptions","description":"The throttling options for a {@link SlashCommand}.","meta":{"line":413,"file":"command.ts","path":"src"},"props":[{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]},{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]}]},{"name":"ApplicationCommandPermissionType","description":"The type of thing to apply the permission to.","meta":{"line":273,"file":"constants.ts","path":"src"},"props":[{"name":"CHANNEL","description":"A Discord channel.","type":[[["3"]]]},{"name":"ROLE","description":"A Discord role.","type":[[["1"]]]},{"name":"USER","description":"A Discord user.","type":[[["2"]]]}]},{"name":"ApplicationCommandType","description":"The types of application commands available.","meta":{"line":92,"file":"constants.ts","path":"src"},"props":[{"name":"CHAT_INPUT","description":"Slash commands; a text-based command that shows up when a user types `/`","type":[[["1"]]]},{"name":"MESSAGE","description":"A UI-based command that shows up when you right click or tap on a messages","type":[[["3"]]]},{"name":"USER","description":"A UI-based command that shows up when you right click or tap on a user","type":[[["2"]]]}]},{"name":"ButtonStyle","description":"The types of component button styles.","meta":{"line":815,"file":"constants.ts","path":"src"},"props":[{"name":"DESTRUCTIVE","description":"A red button.","type":[[["4"]]]},{"name":"LINK","description":"A gray button with a link icon.","type":[[["5"]]]},{"name":"PRIMARY","description":"A primary-colored button.","type":[[["1"]]]},{"name":"SECONDARY","description":"A gray, secondary button.","type":[[["2"]]]},{"name":"SUCCESS","description":"A green button.","type":[[["3"]]]}]},{"name":"ChannelType","description":"The types of channels in Discord channels.","meta":{"line":102,"file":"constants.ts","path":"src"},"props":[{"name":"DM","description":"A direct message between users.","type":[[["1"]]]},{"name":"GROUP_DM","description":"A direct message between multiple users.","type":[[["3"]]]},{"name":"GUILD_CATEGORY","description":"A channel category containing up to 50 channels.","type":[[["4"]]]},{"name":"GUILD_DIRECTORY","description":"The channel in a hub containing the listed servers.","type":[[["14"]]]},{"name":"GUILD_FORUM","description":"A channel that can only contain threads.","type":[[["15"]]]},{"name":"GUILD_NEWS","description":"A channel that users can follow and crosspost into their own server.","type":[[["5"]]]},{"name":"GUILD_NEWS_THREAD","description":"A temporary sub-channel within a `GUILD_NEWS` channel.","type":[[["10"]]]},{"name":"GUILD_PRIVATE_THREAD","description":"A temporary sub-channel within a `GUILD_TEXT` channel.","type":[[["12"]]]},{"name":"GUILD_PUBLIC_THREAD","description":"A temporary sub-channel within a `GUILD_TEXT` channel.","type":[[["11"]]]},{"name":"GUILD_STAGE_VOICE","description":"A voice channel for hosting events with an audience.","type":[[["13"]]]},{"name":"GUILD_STORE","description":"A channel in which game developers can sell their game.","type":[[["6"]]]},{"name":"GUILD_TEXT","description":"A text channel.","type":[[["0"]]]},{"name":"GUILD_VOICE","description":"A voice channel.","type":[[["2"]]]}]},{"name":"CommandOptionType","description":"An object mapping the types a command option can use.","meta":{"line":66,"file":"constants.ts","path":"src"},"props":[{"name":"ATTACHMENT","description":"An attachment.","type":[[["11"]]]},{"name":"BOOLEAN","description":"A boolean.","type":[[["5"]]]},{"name":"CHANNEL","description":"A channel, this would return the channel's ID in the interaction.","type":[[["7"]]]},{"name":"INTEGER","description":"An integer.","type":[[["4"]]]},{"name":"MENTIONABLE","description":"Anything mentionable, returning the ID of the object.","type":[[["9"]]]},{"name":"NUMBER","description":"A decimal.","type":[[["10"]]]},{"name":"ROLE","description":"A role, this would return the role's ID in the interaction.","type":[[["8"]]]},{"name":"STRING","description":"A string.","type":[[["3"]]]},{"name":"SUB_COMMAND","description":"A sub-command for the application's command","type":[[["1"]]]},{"name":"SUB_COMMAND_GROUP","description":"A group of sub-commands","type":[[["2"]]]},{"name":"USER","description":"A user, this would return the user's ID in the interaction.","type":[[["6"]]]}]},{"name":"ComponentType","description":"The types of components available.","meta":{"line":793,"file":"constants.ts","path":"src"},"props":[{"name":"ACTION_ROW","description":"A row of components.","type":[[["1"]]]},{"name":"BUTTON","description":"A button component.","type":[[["2"]]]},{"name":"CHANNEL_SELECT","description":"A channel select component.","type":[[["8"]]]},{"name":"MENTIONABLE_SELECT","description":"A user/role select component.","type":[[["7"]]]},{"name":"ROLE_SELECT","description":"A role select component.","type":[[["6"]]]},{"name":"SELECT","type":[[["3"]]]},{"name":"STRING_SELECT","description":"A string select component.","type":[[["3"]]]},{"name":"TEXT_INPUT","description":"A text input.","type":[[["4"]]]},{"name":"USER_SELECT","description":"A user select component.","type":[[["5"]]]}]},{"name":"EntitlementType","meta":{"line":522,"file":"constants.ts","path":"src"},"props":[{"name":"APPLICATION_SUBSCRIPTION","type":[[["8"]]]}]},{"name":"InteractionResponseFlags","description":"Message flags for interaction responses.","meta":{"line":58,"file":"constants.ts","path":"src"},"props":[{"name":"EPHEMERAL","description":"Sends a message back to the invoker, similar to messages by Clyde.","type":[[["1 << 6"]]]}]},{"name":"InteractionResponseType","description":"The types of interaction responses.","meta":{"line":36,"file":"constants.ts","path":"src"},"props":[{"name":"APPLICATION_COMMAND_AUTOCOMPLETE_RESULT","description":"Responds to an autocomplete interaction request.","type":[[["8"]]]},{"name":"CHANNEL_MESSAGE_WITH_SOURCE","description":"Respond with a message, showing the user's input.","type":[[["4"]]]},{"name":"DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE","description":"Create a deferred message with source.","type":[[["5"]]]},{"name":"DEFERRED_UPDATE_MESSAGE","description":"Acknowledge the interaction, edit the original message later.","type":[[["6"]]]},{"name":"MODAL","description":"Respond to an interaction with a popup modal.","type":[[["9"]]]},{"name":"PONG","description":"Acknowledge a `PING`.","type":[[["1"]]]},{"name":"PREMIUM_REQUIRED","description":"Respond to an interaction with prompt for a premium subscription.","type":[[["10"]]]},{"name":"UPDATE_MESSAGE","description":"Edits the message the component was attached to.","type":[[["7"]]]}]},{"name":"InteractionType","description":"The types of interactions.","meta":{"line":19,"file":"constants.ts","path":"src"},"props":[{"name":"APPLICATION_COMMAND","description":"A command invocation.","type":[[["2"]]]},{"name":"APPLICATION_COMMAND_AUTOCOMPLETE","description":"An autocomplete invocation of a command.","type":[[["4"]]]},{"name":"COMMAND","type":[[["2"]]]},{"name":"MESSAGE_COMPONENT","description":"An invocation of a message component.","type":[[["3"]]]},{"name":"MODAL_SUBMIT","description":"A modal submission.","type":[[["5"]]]},{"name":"PING","description":"A ping.","type":[[["1"]]]}]},{"name":"TextInputStyle","meta":{"line":828,"file":"constants.ts","path":"src"},"props":[{"name":"PARAGRAPH","description":"A multi-line input","type":[[["2"]]]},{"name":"SHORT","description":"A single-line input","type":[[["1"]]]}]},{"name":"AppEntitlement","meta":{"line":510,"file":"constants.ts","path":"src"},"props":[{"name":"application_id","type":[[["string"]]]},{"name":"consumed","type":[[["false"]]]},{"name":"ends_at","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"guild_id","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"sku_id","type":[[["string"]]]},{"name":"starts_at","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"type","type":[[["EntitlementType"]]]},{"name":"user_id","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"ApplicationCommand","description":"An application command in Discord.","access":"private","meta":{"line":168,"file":"constants.ts","path":"src"},"props":[{"name":"application_id","description":"The application's ID responsible for this command.","type":[[["string"]]]},{"name":"default_member_permissions","description":"The member permissions required to use this command.","optional":true,"type":[[["string"," | "],["null"]]]},{"name":"default_permission","description":"Whether to enable this command for everyone by default.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the command.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"description_localizations","description":"The localiztions for the command description.","optional":true,"type":[[["Record","<"],["string",", "],["string","> | "],["null"]]]},{"name":"dm_permission","description":"Whether to enable this command in direct messages.","optional":true,"type":[[["boolean"," | "],["null"]]]},{"name":"guild_id","description":"The guild ID this comamnd is exlusive to.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","description":"The command's ID.","type":[[["string"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"name_localizations","description":"The localiztions for the command name.","optional":true,"type":[[["Record","<"],["string",", "],["string","> | "],["null"]]]},{"name":"nsfw","description":"Whether this command is age-restricted.","optional":true,"type":[[["boolean"," | "],["null"]]]},{"name":"options","description":"The options for the command.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"type","description":"The type of application this is representing. `1` by default.","optional":true,"type":[[["ApplicationCommandType"]]]},{"name":"version","description":"The version ID of the command.","type":[[["string"]]]}]},{"name":"ApplicationCommandOptionArgument","access":"private","meta":{"line":212,"file":"constants.ts","path":"src"},"props":[{"name":"choices","description":"The choices of the option. If set, these are the only values a user can pick from.","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionChoice",">"]]]},{"name":"type","description":"The type of option this one is.","type":[[["STRING"," | "],["INTEGER"," | "],["NUMBER"]]]}]},{"name":"ApplicationCommandOptionAutocompletable","access":"private","meta":{"line":222,"file":"constants.ts","path":"src"},"props":[{"name":"autocomplete","description":"Whether this option can be autocompleted.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"type","description":"The type of option this one is.","type":[[["STRING"," | "],["INTEGER"," | "],["NUMBER"]]]}]},{"name":"ApplicationCommandOptionBase","meta":{"line":179,"file":"constants.ts","path":"src"},"props":[{"name":"description","description":"The description of the option.","type":[[["string"]]]},{"name":"description_localizations","description":"The localiztions for the option description.","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"name_localizations","description":"The localiztions for the option name.","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"required","description":"Whether the parameter is required.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"type","description":"The type of option this one is.","type":[[["BOOLEAN"," | "],["USER"," | "],["ROLE"," | "],["MENTIONABLE"," | "],["ATTACHMENT"]]]}]},{"name":"ApplicationCommandOptionChannel","access":"private","meta":{"line":232,"file":"constants.ts","path":"src"},"props":[{"name":"channel_types","description":"An array of channel types this option can be.","optional":true,"type":[[["Array","<"],["ChannelType",">"]]]},{"name":"type","description":"The type of option this one is.","type":[[["CHANNEL"]]]}]},{"name":"ApplicationCommandOptionChoice","description":"A choice for a user to pick from.","meta":{"line":263,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name of the choice.","type":[[["string"]]]},{"name":"name_localizations","description":"The localiztions for the option name.","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"value","description":"The value of the choice.","type":[[["string"," | "],["number"]]]}]},{"name":"ApplicationCommandOptionLimitedNumber","access":"private","meta":{"line":242,"file":"constants.ts","path":"src"},"props":[{"name":"autocomplete","description":"Whether this option can be autocompleted.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"max_value","description":"The maximum value permitted.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"min_value","description":"The minimum value permitted.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"type","description":"The type of option this one is.","type":[[["INTEGER"," | "],["NUMBER"]]]}]},{"name":"ApplicationCommandOptionSubCommand","access":"private","meta":{"line":202,"file":"constants.ts","path":"src"},"props":[{"name":"options","description":"The sub-options for the option. This can only be used for sub-commands and sub-command groups.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"type","description":"The type of option this one is.","type":[[["SUB","_"],["COMMAND"," | "],["SUB","_"],["COMMAND","_"],["GROUP"]]]}]},{"name":"ApplicationCommandPermissions","description":"A permission in a command.","meta":{"line":283,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"permission","type":[[["boolean"]]]},{"name":"type","type":[[["ApplicationCommandPermissionType"]]]}]},{"name":"AttachmentData","description":"An attachment from an interaction.","meta":{"line":941,"file":"constants.ts","path":"src"},"props":[{"name":"content_type","description":"The content type of the attachment.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"description","description":"The description of the attachment.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"duration_secs","description":"The duration of the voice message attachment in seconds","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"ephermal","description":"Whether the attachment is ephemeral","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"filename","description":"The filename of the attachment.","type":[[["string"]]]},{"name":"height","description":"The height of the attachment.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"id","description":"The ID of the attachment.","type":[[["string"]]]},{"name":"proxy_url","description":"The proxy URL of the attachment.","type":[[["string"]]]},{"name":"size","description":"The size of the attachment in bytes.","type":[[["number"]]]},{"name":"url","description":"The URL of the attachment.","type":[[["string"]]]},{"name":"waveform","description":"The base64-encoded byte array of the voice messsage's waveform","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"width","description":"The width of the attachment.","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"AutocompleteData","access":"private","meta":{"line":568,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]},{"name":"type","type":[[["ApplicationCommandType"]]]},{"name":"version","type":[[["string"]]]}]},{"name":"CommandBooleanOption","access":"private","meta":{"line":777,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["CommandOptionType","."],["BOOLEAN"]]]},{"name":"value","type":[[["boolean"]]]}]},{"name":"CommandChannel","access":"private","meta":{"line":629,"file":"constants.ts","path":"src"},"props":[{"name":"available_tags","optional":true,"type":[[["Array","<"],["ForumTag",">"]]]},{"name":"bitrate","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"default_auto_archive_duration","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"default_forum_layout","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"default_reaction_emoji","optional":true,"type":[[["ForumDefaultReaction"," | "],["null"]]]},{"name":"default_sort_order","optional":true,"type":[[["number"," | "],["null"]]]},{"name":"default_thread_rate_limit_per_user","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"flags","type":[[["number"]]]},{"name":"guild_id","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"last_message_id","type":[[["string"," | "],["null"]]]},{"name":"member_count","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"member_ids_preview","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"message_count","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"name","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"nsfw","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"parent_id","optional":true,"type":[[["string"," | "],["null"]]]},{"name":"permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"position","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"rate_limit_per_user","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"rtc_region","optional":true,"type":[[["string"," | "],["null"]]]},{"name":"thread_metadata","optional":true,"type":[[["ThreadMetadata"]]]},{"name":"topic","optional":true,"type":[[["string"," | "],["null"]]]},{"name":"total_message_sent","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"type","type":[[["ChannelType"]]]},{"name":"user_limit","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"CommandData","access":"private","meta":{"line":731,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["AnyCommandOption",">"]]]},{"name":"resolved","optional":true,"type":[[["undefined"," | {"],["\nattachments",": "],["undefined"," | {},"],["\nchannels",": "],["undefined"," | {},"],["\nmembers",": "],["undefined"," | {},"],["\nmessages",": "],["undefined"," | {},"],["\nroles",": "],["undefined"," | {},"],["\nusers",": "],["undefined"," | {}"],["\n","}"]]]},{"name":"target_id","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"type","type":[[["ApplicationCommandType"]]]}]},{"name":"CommandIntegerOption","access":"private","meta":{"line":766,"file":"constants.ts","path":"src"},"props":[{"name":"focused","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"max_value","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"min_value","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["CommandOptionType","."],["INTEGER"]]]},{"name":"value","type":[[["number"]]]}]},{"name":"CommandMember","access":"private","meta":{"line":595,"file":"constants.ts","path":"src"},"props":[{"name":"avatar","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"communication_disabled_until","type":[[["string"," | "],["null"]]]},{"name":"deaf","type":[[["boolean"]]]},{"name":"flags","type":[[["number"]]]},{"name":"joined_at","type":[[["string"]]]},{"name":"mute","type":[[["boolean"]]]},{"name":"nick","type":[[["string"," | "],["null"]]]},{"name":"pending","type":[[["boolean"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"premium_since","type":[[["string"," | "],["null"]]]},{"name":"roles","type":[[["Array","<"],["string",">"]]]},{"name":"user","type":[[["CommandUser"]]]}]},{"name":"CommandStringOption","access":"private","meta":{"line":755,"file":"constants.ts","path":"src"},"props":[{"name":"focused","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"max_length","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"min_length","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["STRING"," | "],["USER"," | "],["CHANNEL"," | "],["ROLE"]]]},{"name":"value","type":[[["string"]]]}]},{"name":"CommandSubcommandOption","access":"private","meta":{"line":785,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["AnyCommandOption",">"]]]},{"name":"type","optional":true,"type":[[["SUB","_"],["COMMAND"," | "],["SUB","_"],["COMMAND","_"],["GROUP"]]]}]},{"name":"CommandUser","access":"private","meta":{"line":603,"file":"constants.ts","path":"src"},"props":[{"name":"avatar","type":[[["string"," | "],["null"]]]},{"name":"avatar_decoration","type":[[["string"," | "],["null"]]]},{"name":"discriminator","type":[[["string"]]]},{"name":"global_name","type":[[["string"," | "],["null"]]]},{"name":"id","type":[[["string"]]]},{"name":"public_flags","type":[[["number"]]]},{"name":"username","type":[[["string"]]]}]},{"name":"ComponentActionRow","description":"A row of components.","meta":{"line":839,"file":"constants.ts","path":"src"},"props":[{"name":"components","description":"The components to show inside this row.","type":[[["Array","<"],["AnyComponentButton"," | "],["ComponentSelectMenu"," | "],["ComponentTextInput",">"]]]},{"name":"type","description":"The type of component to use.","type":[[["ACTION","_"],["ROW"]]]}]},{"name":"ComponentButton","description":"A regular component button.","meta":{"line":850,"file":"constants.ts","path":"src"},"props":[{"name":"custom_id","description":"The identifier for this button.","type":[[["string"]]]},{"name":"disabled","description":"Whether this button will show as disabled.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"emoji","description":"The emoji to show inside the button.","optional":true,"type":[[["PartialEmoji"]]]},{"name":"label","description":"The label of the button.","type":[[["string"]]]},{"name":"style","description":"The style of button to show.","type":[[["PRIMARY"," | "],["SECONDARY"," | "],["SUCCESS"," | "],["DESTRUCTIVE"]]]},{"name":"type","description":"The type of component to use.","type":[[["BUTTON"]]]}]},{"name":"ComponentButtonLink","description":"A component button with a link.","meta":{"line":866,"file":"constants.ts","path":"src"},"props":[{"name":"style","description":"The style of button to show.","type":[[["LINK"]]]},{"name":"url","description":"The URL for link buttons.","type":[[["string"]]]}]},{"name":"ComponentSelectMenu","meta":{"line":873,"file":"constants.ts","path":"src"},"props":[{"name":"channel_types","description":"An array of channel types this select can use. Only used for channel selects.","optional":true,"type":[[["Array","<"],["ChannelType",">"]]]},{"name":"custom_id","description":"The identifier of the of the menu.","type":[[["string"]]]},{"name":"default_values","description":"An array of default values.","optional":true,"type":[[["Array","<"],["SelectDefaultValue",">"]]]},{"name":"disabled","description":"Whether this menu will show as disabled.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"max_values","description":"The maximum number of items to be chosen.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"min_values","description":"The minimum number of items to be chosen.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"options","description":"The options to show inside this menu. Only used for string selects.","optional":true,"type":[[["Array","<"],["ComponentSelectOption",">"]]]},{"name":"placeholder","description":"The string to show in absence of a selected option.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"type","description":"The type of component to use.","type":[[["ComponentType","."],["STRING","_"],["SELECT"," | "],["USER","_"],["SELECT"," | "],["ROLE","_"],["SELECT"," | "],["MENTIONABLE","_"],["SELECT"," | "],["CHANNEL","_"],["SELECT"]]]}]},{"name":"ComponentSelectOption","meta":{"line":906,"file":"constants.ts","path":"src"},"props":[{"name":"default","description":"Should this render by default","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of this option.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"emoji","description":"The emoji to show with the option.","optional":true,"type":[[["PartialEmoji"]]]},{"name":"label","description":"The label of this option.","type":[[["string"]]]},{"name":"value","description":"The value of this option.","type":[[["string"]]]}]},{"name":"ComponentTextInput","meta":{"line":919,"file":"constants.ts","path":"src"},"props":[{"name":"custom_id","description":"The identifier of the of the input.","type":[[["string"]]]},{"name":"label","description":"The label of the input.","type":[[["string"]]]},{"name":"max_length","description":"The maximum length of the input.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"min_length","description":"The minimum length of the input.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"placeholder","description":"Custom placeholder text if the input is empty.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"required","description":"Whether this component is required to be filled.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"style","description":"The style of the input.","type":[[["TextInputStyle"]]]},{"name":"type","description":"The type of component to use.","type":[[["TEXT","_"],["INPUT"]]]},{"name":"value","description":"A pre-filled value for this input.","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"DMCommandAutocompleteRequestData","description":"A message component interaction within a direct message.","access":"private","meta":{"line":536,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"channel","type":[[["CommandChannel"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["AutocompleteData"]]]},{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["APPLICATION","_"],["COMMAND","_"],["AUTOCOMPLETE"]]]},{"name":"user","type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"DMInteractionRequestData","description":"A command interaction within a direct message.","access":"private","meta":{"line":401,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"channel","type":[[["CommandChannel"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["CommandData"]]]},{"name":"entitlements","type":[[["Array","<"],["AppEntitlement",">"]]]},{"name":"id","type":[[["string"]]]},{"name":"locale","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["InteractionType","."],["APPLICATION","_"],["COMMAND"]]]},{"name":"user","type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"DMMessageComponentRequestData","description":"A message component interaction within a direct message.","access":"private","meta":{"line":465,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"channel","type":[[["CommandChannel"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["{"],["\ncomponent","_"],["type",": "],["ComponentType",","],["\ncustom","_"],["id",": "],["string",","],["\nvalues",": "],["Array","<"],["string",">"],["\n","}"]]]},{"name":"entitlements","type":[[["Array","<"],["AppEntitlement",">"]]]},{"name":"guild_locale","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"locale","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"message","type":[[["MessageData"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["MESSAGE","_"],["COMPONENT"]]]},{"name":"user","type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"DMModalSubmitRequestData","description":"A modal submission within a direct message.","access":"private","meta":{"line":349,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["{"],["\ncomponents",": "],["Array","<"],["ComponentActionRow",">,"],["\ncustom","_"],["id",": "],["string\n","}"]]]},{"name":"entitlements","type":[[["Array","<"],["AppEntitlement",">"]]]},{"name":"id","type":[[["string"]]]},{"name":"locale","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"message","optional":true,"type":[[["MessageData"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["MODAL","_"],["SUBMIT"]]]},{"name":"user","type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"ForumDefaultReaction","description":"A forum channel's default reaction","meta":{"line":695,"file":"constants.ts","path":"src"},"props":[{"name":"emoji_id","description":"The ID of the custom emoji","type":[[["string"," | "],["null"]]]},{"name":"emoji_name","description":"The name of the emoji","type":[[["string"]]]}]},{"name":"ForumTag","description":"A forum channel's tag","meta":{"line":681,"file":"constants.ts","path":"src"},"props":[{"name":"emoji_id","description":"The ID of the custom emoji associated with the tag","type":[[["string"," | "],["null"]]]},{"name":"emoji_name","description":"The name of the emoji associated with the tag","type":[[["string"]]]},{"name":"id","description":"The ID of the tag","type":[[["string"]]]},{"name":"moderated","description":"Whether this tag can be added/removed by moderators","type":[[["boolean"]]]},{"name":"name","description":"The name of the tag","type":[[["string"]]]}]},{"name":"GuildApplicationCommandPermissions","access":"private","meta":{"line":296,"file":"constants.ts","path":"src"},"props":[{"name":"application_id","type":[[["string"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"permissions","type":[[["Array","<"],["ApplicationCommandPermissions",">"]]]}]},{"name":"GuildCommandAutocompleteRequestData","description":"A message component interaction within a guild.","access":"private","meta":{"line":553,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"channel","type":[[["CommandChannel"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["AutocompleteData"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"member","type":[[["CommandMember"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["APPLICATION","_"],["COMMAND","_"],["AUTOCOMPLETE"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"GuildInteractionRequestData","description":"A command interaction within a guild.","access":"private","meta":{"line":420,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"channel","type":[[["CommandChannel"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["CommandData"]]]},{"name":"entitlements","type":[[["Array","<"],["AppEntitlement",">"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"guild_locale","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"locale","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"member","type":[[["CommandMember"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["InteractionType","."],["APPLICATION","_"],["COMMAND"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"GuildMessageComponentRequestData","description":"A message component interaction within a guild.","access":"private","meta":{"line":490,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"channel","type":[[["CommandChannel"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["{"],["\ncomponent","_"],["type",": "],["ComponentType",","],["\ncustom","_"],["id",": "],["string",","],["\nvalues",": "],["Array","<"],["string",">"],["\n","}"]]]},{"name":"entitlements","type":[[["Array","<"],["AppEntitlement",">"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"member","type":[[["CommandMember"]]]},{"name":"message","type":[[["MessageData"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["MESSAGE","_"],["COMPONENT"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"GuildModalSubmitRequestData","description":"A modal submission within a guild.","access":"private","meta":{"line":371,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["{"],["\ncomponents",": "],["Array","<"],["ComponentActionRow",">,"],["\ncustom","_"],["id",": "],["string\n","}"]]]},{"name":"entitlements","type":[[["Array","<"],["AppEntitlement",">"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"guild_locale","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"locale","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"member","type":[[["CommandMember"]]]},{"name":"message","optional":true,"type":[[["MessageData"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["MODAL","_"],["SUBMIT"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"PartialApplicationCommand","description":"An partial application command in Discord.","access":"private","meta":{"line":135,"file":"constants.ts","path":"src"},"props":[{"name":"default_member_permissions","description":"The member permissions required to use this command.","optional":true,"type":[[["string"," | "],["null"]]]},{"name":"default_permission","description":"Whether to enable this command for everyone by default.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the command.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"description_localizations","description":"The localiztions for the command description.","optional":true,"type":[[["Record","<"],["string",", "],["string","> | "],["null"]]]},{"name":"dm_permission","description":"Whether to enable this command in direct messages.","optional":true,"type":[[["boolean"," | "],["null"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"name_localizations","description":"The localiztions for the command name.","optional":true,"type":[[["Record","<"],["string",", "],["string","> | "],["null"]]]},{"name":"nsfw","description":"Whether this command is age-restricted.","optional":true,"type":[[["boolean"," | "],["null"]]]},{"name":"options","description":"The options for the command.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"type","description":"The type of application this is representing. `1` by default.","optional":true,"type":[[["ApplicationCommandType"]]]}]},{"name":"PartialApplicationCommandPermissions","access":"private","meta":{"line":290,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"permissions","type":[[["Array","<"],["ApplicationCommandPermissions",">"]]]}]},{"name":"PartialEmoji","description":"The partial emoji from a message component.","meta":{"line":452,"file":"constants.ts","path":"src"},"props":[{"name":"animated","description":"Whether this emoji is animated.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"id","description":"The ID of the emoji, if it is custom.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"name","description":"The name of the emoji, or the raw emoji if not custom.","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"PartialMessage","description":"The partial message from a message component interaction.","meta":{"line":444,"file":"constants.ts","path":"src"},"props":[{"name":"flags","description":"The message flags.","type":[[["number"]]]},{"name":"id","description":"The ID of the message.","type":[[["string"]]]}]},{"name":"PingRequestData","description":"A ping interaction.","access":"private","meta":{"line":335,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["PING"]]]},{"name":"user","optional":true,"type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"RawRequest","access":"private","meta":{"line":302,"file":"constants.ts","path":"src"},"props":[{"name":"auth","type":[[["boolean"]]]},{"name":"body","type":[[["any"]]]},{"name":"method","type":[[["string"]]]},{"name":"reason","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"resp","type":[[["IncomingMessage"]]]},{"name":"route","type":[[["string"]]]},{"name":"short","type":[[["boolean"]]]},{"name":"url","type":[[["string"]]]}]},{"name":"RequestData","access":"private","meta":{"line":322,"file":"constants.ts","path":"src"},"props":[{"name":"app_permissions","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"application_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["InteractionType"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"ResolvedMemberData","access":"private","meta":{"line":583,"file":"constants.ts","path":"src"},"props":[{"name":"avatar","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"communication_disabled_until","type":[[["string"," | "],["null"]]]},{"name":"flags","type":[[["number"]]]},{"name":"joined_at","type":[[["string"]]]},{"name":"nick","type":[[["string"," | "],["null"]]]},{"name":"pending","type":[[["boolean"]]]},{"name":"premium_since","type":[[["string"," | "],["null"]]]},{"name":"roles","type":[[["Array","<"],["string",">"]]]}]},{"name":"ResolvedRole","access":"private","meta":{"line":614,"file":"constants.ts","path":"src"},"props":[{"name":"color","type":[[["number"]]]},{"name":"hoist","type":[[["boolean"]]]},{"name":"icon","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"managed","type":[[["boolean"]]]},{"name":"mentionable","type":[[["boolean"]]]},{"name":"name","type":[[["string"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"position","type":[[["number"]]]},{"name":"tags","optional":true,"type":[[["RoleTags"]]]},{"name":"unicode_emoji","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"RoleTags","description":"A role's tags","meta":{"line":703,"file":"constants.ts","path":"src"},"props":[{"name":"available_for_purchase","description":"Whether this role can be purchased","optional":true,"type":[[["undefined"," | "],["null"]]]},{"name":"bot_id","description":"The ID of the bot that belongs to the role","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"guild_connections","description":"Whether this is a guild's linked role","optional":true,"type":[[["undefined"," | "],["null"]]]},{"name":"integration_id","description":"The ID of the integration that belongs to the role","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"premium_subscriber","description":"Whether this is the guild's booster role","optional":true,"type":[[["undefined"," | "],["null"]]]},{"name":"subscription_listing_id","description":"The ID of this role's subscription SKU and listing","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"SelectDefaultValue","meta":{"line":899,"file":"constants.ts","path":"src"},"props":[{"name":"id","description":"The ID of the object","type":[[["string"]]]},{"name":"type","description":"The type that the ID represents.","type":[[["unknown"," | "],["unknown"," | "],["unknown"]]]}]},{"name":"ThreadMetadata","description":"Channel metadata for thread-specific channel fields","meta":{"line":667,"file":"constants.ts","path":"src"},"props":[{"name":"archive_timestamp","description":"The timestamp of the last time the archived status was changed","type":[[["string"]]]},{"name":"archived","description":"Whether the thread has been archived","type":[[["boolean"]]]},{"name":"auto_archive_duration","description":"The time, in minutes, of inactivity in the thread until its automatically archived","type":[[["number"]]]},{"name":"create_timestamp","description":"The timestamp of when the thread was created","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"locked","description":"Whether the thread has been locked","type":[[["boolean"]]]}]},{"name":"AnyCommandOption","access":"private","type":[[["CommandStringOption"," | "],["CommandIntegerOption"," | "],["CommandBooleanOption"," | "],["CommandSubcommandOption"]]],"meta":{"line":748,"file":"constants.ts","path":"src"}},{"name":"AnyComponent","description":"Any component.","type":[[["ComponentActionRow"," | "],["AnyComponentButton"," | "],["ComponentSelectMenu"," | "],["ComponentTextInput"]]],"meta":{"line":836,"file":"constants.ts","path":"src"}},{"name":"AnyComponentButton","description":"Any component button.","type":[[["ComponentButton"," | "],["ComponentButtonLink"]]],"meta":{"line":847,"file":"constants.ts","path":"src"}},{"name":"AnyRequestData","description":"Any interaction request from Discord.","type":[[["PingRequestData"," | "],["InteractionRequestData"," | "],["MessageComponentRequestData"," | "],["CommandAutocompleteRequestData"," | "],["ModalSubmitRequestData"]]],"meta":{"line":314,"file":"constants.ts","path":"src"}},{"name":"ApplicationCommandOption","description":"An option in an application command.","type":[[["ApplicationCommandOptionBase"," | "],["ApplicationCommandOptionSubCommand"," | "],["ApplicationCommandOptionArgument"," | "],["ApplicationCommandOptionAutocompletable"," | "],["ApplicationCommandOptionChannel"," | "],["ApplicationCommandOptionLimitedNumber"]]],"meta":{"line":254,"file":"constants.ts","path":"src"}},{"name":"CommandAutocompleteRequestData","description":"Any message component interaction.","access":"private","type":[[["DMCommandAutocompleteRequestData"," | "],["GuildCommandAutocompleteRequestData"]]],"meta":{"line":580,"file":"constants.ts","path":"src"}},{"name":"ImageFormat","description":"Any image format supported by Discord.","type":[[["unknown"," | "],["unknown"," | "],["unknown"," | "],["unknown"," | "],["unknown"]]],"meta":{"line":971,"file":"constants.ts","path":"src"}},{"name":"InteractionRequestData","description":"Any command interaction.","access":"private","type":[[["DMInteractionRequestData"," | "],["GuildInteractionRequestData"]]],"meta":{"line":441,"file":"constants.ts","path":"src"}},{"name":"MessageComponentRequestData","description":"Any message component interaction.","access":"private","type":[[["DMMessageComponentRequestData"," | "],["GuildMessageComponentRequestData"]]],"meta":{"line":530,"file":"constants.ts","path":"src"}},{"name":"ModalSubmitRequestData","description":"Any modal submission.","access":"private","type":[[["DMModalSubmitRequestData"," | "],["GuildModalSubmitRequestData"]]],"meta":{"line":395,"file":"constants.ts","path":"src"}},{"name":"SlashCreatorEvents","description":"The events typings for the {@link SlashCreator}.","access":"private","meta":{"line":868,"file":"creator.ts","path":"src"},"props":[{"name":"autocompleteInteraction","type":[[["("],["ctx",": "],["AutocompleteContext",", "],["command",": "],["SlashCommand",") => "],["void"]]]},{"name":"commandBlock","type":[[["("],["command",": "],["SlashCommand",", "],["ctx",": "],["CommandContext",", "],["reason",": "],["string",", "],["data",": "],["any",") => "],["void"]]]},{"name":"commandError","type":[[["("],["command",": "],["SlashCommand",", "],["err",": "],["Error",", "],["ctx",": "],["CommandContext",") => "],["void"]]]},{"name":"commandInteraction","type":[[["("],["interaction",": "],["InteractionRequestData",", "],["respond",": "],["RespondFunction",", "],["webserverMode",": "],["boolean",") => "],["void"]]]},{"name":"commandRegister","type":[[["("],["command",": "],["SlashCommand",", "],["creator",": "],["SlashCreator",") => "],["void"]]]},{"name":"commandReregister","type":[[["("],["command",": "],["SlashCommand",", "],["oldCommand",": "],["SlashCommand",") => "],["void"]]]},{"name":"commandRun","type":[[["("],["command",": "],["SlashCommand",", "],["promise",": "],["Promise","<"],["any",">, "],["ctx",": "],["CommandContext",") => "],["void"]]]},{"name":"commandUnregister","type":[[["("],["command",": "],["SlashCommand",") => "],["void"]]]},{"name":"componentInteraction","type":[[["("],["ctx",": "],["ComponentContext",") => "],["void"]]]},{"name":"debug","type":[[["("],["message",": "],["string",") => "],["void"]]]},{"name":"error","type":[[["("],["err",": "],["Error",") => "],["void"]]]},{"name":"modalInteraction","type":[[["("],["ctx",": "],["ModalInteractionContext",") => "],["void"]]]},{"name":"ping","type":[[["("],["user",": "],["CommandUser",") => "],["void"]]]},{"name":"rawInteraction","type":[[["("],["interaction",": "],["AnyRequestData",") => "],["void"]]]},{"name":"rawREST","type":[[["("],["request",": "],["RawRequest",") => "],["void"]]]},{"name":"rawRequest","type":[[["("],["treq",": "],["TransformedRequest",") => "],["void"]]]},{"name":"synced","type":[[["(..."],["args",": "],["unknown","[]) => "],["void"]]]},{"name":"unknownInteraction","type":[[["("],["interaction",": "],["any",") => "],["void"]]]},{"name":"unverifiedRequest","type":[[["("],["treq",": "],["TransformedRequest",") => "],["void"]]]},{"name":"warn","type":[[["("],["warning",": "],["Error"," | "],["string",") => "],["void"]]]}]},{"name":"SlashCreatorOptions","description":"The options for the {@link SlashCreator}.","meta":{"line":892,"file":"creator.ts","path":"src"},"props":[{"name":"agent","description":"A HTTP Agent used to proxy requests","optional":true,"type":[[["HTTPS","."],["Agent"]]]},{"name":"allowedMentions","description":"The default allowed mentions for all messages.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"applicationID","description":"Your Application's ID","type":[[["string"]]]},{"name":"client","description":"The client to pass to the creator","optional":true,"type":[[["any"]]]},{"name":"componentTimeouts","description":"Whether to enable automatic component timeouts.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"defaultImageFormat","description":"The default format to provide user avatars in.","optional":true,"type":[[["ImageFormat"]]]},{"name":"defaultImageSize","description":"The default image size to provide user avatars in.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"disableTimeouts","description":"Whether to disable automatic defer/acknowledge timeouts.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"endpointPath","description":"The path where the server will listen for interactions.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"handleCommandsManually","description":"Whether to hand off command interactions to the `commandInteraction` event\nrather than handle it automatically.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"latencyThreshold","description":"The average latency where SlashCreate will start emitting warnings for.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"maxSignatureTimestamp","description":"A number of milliseconds before requests with a timestamp past that time get rejected.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"publicKey","description":"The public key for your application.\nRequired for webservers.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"ratelimiterOffset","description":"A number of milliseconds to offset the ratelimit timing calculations by.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"requestTimeout","description":"A number of milliseconds before requests are considered timed out.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"serverHost","description":"The host where the server will listen on.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"serverPort","description":"The port where the server will listen on.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"token","description":"The bot/client token for the application.\nRecommended to set this in your config.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"unknownCommandResponse","description":"Whether to respond to an unknown command with an ephemeral message.\nIf an unknown command is registered, this is ignored.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"SyncCommandOptions","description":"The options for {@link SlashCreator#syncCommands}.","meta":{"line":946,"file":"creator.ts","path":"src"},"props":[{"name":"deleteCommands","description":"Whether to delete commands that do not exist in the creator.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"skipGuildErrors","description":"Whether to skip over guild syncing errors.\nGuild syncs most likely can error if that guild no longer exists.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"syncGuilds","description":"Whether to sync guild-specific commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"syncPermissions","description":"Whether to sync command permissions after syncing commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"ComponentRegisterCallback","type":[[["("],["ctx",": "],["ComponentContext",") => "],["void"]]],"meta":{"line":964,"file":"creator.ts","path":"src"},"params":[{"name":"ctx","type":[[["ComponentContext"]]]}],"returns":[[["void"]]]},{"name":"ModalRegisterCallback","type":[[["("],["ctx",": "],["ModalInteractionContext",") => "],["void"]]],"meta":{"line":965,"file":"creator.ts","path":"src"},"params":[{"name":"ctx","type":[[["ModalInteractionContext"]]]}],"returns":[[["void"]]]},{"name":"Response","description":"A general HTTP response.","access":"private","meta":{"line":69,"file":"server.ts","path":"src"},"props":[{"name":"body","description":"The body of the response.","optional":true,"type":[[["any"]]]},{"name":"files","description":"The files of the response.","optional":true,"type":[[["Array","<"],["any",">"]]]},{"name":"headers","description":"The headers for the response.","optional":true,"type":[[["undefined"," | {}"]]]},{"name":"status","description":"The status code for the response.","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"ServerOptions","description":"Options for a {@link Server}.","meta":{"line":48,"file":"server.ts","path":"src"},"props":[{"name":"alreadyListening","description":"Whether or not the server is already listening to a port.","type":[[["boolean"]]]}]},{"name":"TransformedRequest","description":"A general HTTP request.","meta":{"line":54,"file":"server.ts","path":"src"},"props":[{"name":"body","description":"The body of the request.","type":[[["any"]]]},{"name":"headers","description":"The headers of the request.","type":[[["{}"]]]},{"name":"request","description":"The request class from a Server, depending on what server it is.","type":[[["any"]]]},{"name":"response","description":"The response class from a Server, depending on what server it is.","type":[[["any"]]]}]},{"name":"InteractionHandler","access":"private","type":[[["("],["interaction",": "],["AnyRequestData",") => "],["void"]]],"meta":{"line":96,"file":"server.ts","path":"src"},"params":[{"name":"interaction","type":[[["AnyRequestData"]]]}],"returns":[[["void"]]]},{"name":"RespondFunction","access":"private","type":[[["("],["response",": "],["Response",") => "],["Promise","<"],["void",">"]]],"meta":{"line":84,"file":"server.ts","path":"src"},"params":[{"name":"response","type":[[["Response"]]]}],"returns":[[["Promise","<"],["void",">"]]]},{"name":"ServerRequestHandler","access":"private","type":[[["("],["treq",": "],["TransformedRequest",", "],["respond",": "],["RespondFunction",") => "],["void"]]],"meta":{"line":90,"file":"server.ts","path":"src"},"params":[{"name":"treq","type":[[["TransformedRequest"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["void"]]]},{"name":"EventHandler","access":"private","type":[[["("],["handler",": "],["InteractionHandler",") => "],["void"]]],"meta":{"line":4,"file":"gateway.ts","path":"src/servers"},"params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]]},{"name":"AutocompleteChoice","meta":{"line":81,"file":"autocompleteContext.ts","path":"src/structures/interfaces"},"props":[{"name":"name","type":[[["string"]]]},{"name":"value","type":[[["string"," | "],["number"]]]}]},{"name":"EditMessageOptions","description":"The options for {@link MessageInteractionContext#edit}.","meta":{"line":378,"file":"messageInteraction.ts","path":"src/structures/interfaces"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"attachments","description":"The attachment data of the message.","optional":true,"type":[[["Array","<"],["MessageAttachmentOptions",">"]]]},{"name":"components","description":"The components of the message.","optional":true,"type":[[["Array","<"],["ComponentActionRow",">"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["MessageEmbedOptions",">"]]]},{"name":"file","description":"The attachment(s) to send with the message.\nNote that ephemeral messages and initial messages cannot have\nattachments.","optional":true,"type":[[["MessageFile"," | "],["Array","<"],["MessageFile",">"]]]}]},{"name":"MessageAttachmentOptions","description":"A message attachment describing a file.","meta":{"line":406,"file":"messageInteraction.ts","path":"src/structures/interfaces"},"props":[{"name":"description","description":"The description of the attachment.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","description":"The ID of the attachment. For existing attachments, this must be the ID snowflake of the attachment, otherwise, this will be the index of the files being sent to Discord.","type":[[["string"," | "],["number"]]]},{"name":"name","description":"The name of the attachment.","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"MessageFile","description":"A file within {@link EditMessageOptions}.","meta":{"line":398,"file":"messageInteraction.ts","path":"src/structures/interfaces"},"props":[{"name":"file","description":"The attachment to send.","type":[[["Buffer"]]]},{"name":"name","description":"The name of the file.","type":[[["string"]]]}]},{"name":"MessageOptions","description":"The options for {@link MessageInteractionContext#send} and {@link MessageInteractionContext#sendFollowUp}.","meta":{"line":416,"file":"messageInteraction.ts","path":"src/structures/interfaces"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"attachments","description":"The attachment data of the message.","optional":true,"type":[[["Array","<"],["MessageAttachmentOptions",">"]]]},{"name":"components","description":"The components of the message.","optional":true,"type":[[["Array","<"],["ComponentActionRow",">"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["MessageEmbedOptions",">"]]]},{"name":"ephemeral","description":"Whether or not the message should be ephemeral.\nIgnored if `flags` is defined.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"file","description":"The attachment(s) to send with the message.\nNote that ephemeral messages and initial messages cannot have\nattachments.","optional":true,"type":[[["MessageFile"," | "],["Array","<"],["MessageFile",">"]]]},{"name":"flags","description":"The flags to use in the message.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"tts","description":"Whether to use TTS for the content.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"ModalOptions","meta":{"line":51,"file":"modalSendableContext.ts","path":"src/structures/interfaces"},"props":[{"name":"components","description":"The components of the modal.","type":[[["Array","<"],["ComponentActionRow",">"]]]},{"name":"custom_id","description":"The custom ID of the modal. If a callback is provided but not a custom ID, one will be generated and returned.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"title","description":"The title of the modal","type":[[["string"]]]}]},{"name":"EmbedAuthor","meta":{"line":179,"file":"message.ts","path":"src/structures"},"props":[{"name":"icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"proxy_icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"EmbedAuthorOptions","meta":{"line":186,"file":"message.ts","path":"src/structures"},"props":[{"name":"icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"proxy_icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"EmbedField","meta":{"line":193,"file":"message.ts","path":"src/structures"},"props":[{"name":"inline","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"name","type":[[["string"]]]},{"name":"value","type":[[["string"]]]}]},{"name":"EmbedFooter","meta":{"line":199,"file":"message.ts","path":"src/structures"},"props":[{"name":"icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"proxy_icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"text","type":[[["string"]]]}]},{"name":"EmbedFooterOptions","meta":{"line":205,"file":"message.ts","path":"src/structures"},"props":[{"name":"icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"text","type":[[["string"]]]}]},{"name":"EmbedImage","meta":{"line":210,"file":"message.ts","path":"src/structures"},"props":[{"name":"height","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"proxy_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"width","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"EmbedImageOptions","meta":{"line":216,"file":"message.ts","path":"src/structures"},"props":[{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"EmbedProvider","meta":{"line":220,"file":"message.ts","path":"src/structures"},"props":[{"name":"name","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"EmbedVideo","meta":{"line":225,"file":"message.ts","path":"src/structures"},"props":[{"name":"height","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"proxy_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"width","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"MessageAttachment","description":"A message attachment.","meta":{"line":135,"file":"message.ts","path":"src/structures"},"props":[{"name":"content_type","description":"The attachment's content type.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"filename","description":"The filename of the attachment.","type":[[["string"]]]},{"name":"height","description":"The height of the image, if the attachment was an image.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"id","description":"The ID of the attachment.","type":[[["string"]]]},{"name":"proxy_url","description":"The proxied URL of the attachment.","type":[[["string"]]]},{"name":"size","description":"The size of the attachment in bytes.","type":[[["number"]]]},{"name":"url","description":"The source URL of the attachment.","type":[[["string"]]]},{"name":"width","description":"The width of the image, if the attachment was an image.","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"MessageEmbed","description":"A message embed.","meta":{"line":169,"file":"message.ts","path":"src/structures"},"props":[{"name":"author","optional":true,"type":[[["EmbedAuthor"]]]},{"name":"footer","optional":true,"type":[[["EmbedFooter"]]]},{"name":"image","optional":true,"type":[[["EmbedImage"]]]},{"name":"provider","optional":true,"type":[[["EmbedProvider"]]]},{"name":"thumbnail","optional":true,"type":[[["EmbedImage"]]]},{"name":"type","type":[[["string"]]]},{"name":"video","optional":true,"type":[[["EmbedVideo"]]]}]},{"name":"MessageEmbedOptions","description":"Options to creating a message embed.","meta":{"line":155,"file":"message.ts","path":"src/structures"},"props":[{"name":"author","optional":true,"type":[[["EmbedAuthorOptions"]]]},{"name":"color","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"description","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"fields","optional":true,"type":[[["Array","<"],["EmbedField",">"]]]},{"name":"footer","optional":true,"type":[[["EmbedFooterOptions"]]]},{"name":"image","optional":true,"type":[[["EmbedImageOptions"]]]},{"name":"thumbnail","optional":true,"type":[[["EmbedImageOptions"]]]},{"name":"timestamp","optional":true,"type":[[["Date"," | "],["string"]]]},{"name":"title","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"MessageInteraction","description":"A message interaction.","meta":{"line":113,"file":"message.ts","path":"src/structures"},"props":[{"name":"id","description":"The ID of the interaction.","type":[[["string"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"type","description":"The type of interaction.","type":[[["InteractionType"]]]},{"name":"user","description":"The user who invoked the interaction.","type":[[["User"]]]}]},{"name":"MessageReference","description":"A message reference.","meta":{"line":125,"file":"message.ts","path":"src/structures"},"props":[{"name":"channelID","description":"The ID of the channel the reference is from.","type":[[["string"]]]},{"name":"guildID","description":"The ID of the guild the reference is from.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"messageID","description":"The message ID of the reference.","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"FormattedAllowedMentions","description":"The formatted allowed_mentions for Discord.","access":"private","meta":{"line":158,"file":"util.ts","path":"src"},"props":[{"name":"parse","type":[[["Array","<"],["unknown"," | "],["unknown"," | "],["unknown",">"]]]},{"name":"roles","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"users","optional":true,"type":[[["Array","<"],["string",">"]]]}]},{"name":"MessageAllowedMentions","description":"The allowed mentions for a {@link Message}.","meta":{"line":148,"file":"util.ts","path":"src"},"props":[{"name":"everyone","type":[[["boolean"]]]},{"name":"roles","optional":true,"type":[[["boolean"," | "],["Array","<"],["string",">"]]]},{"name":"users","optional":true,"type":[[["boolean"," | "],["Array","<"],["string",">"]]]}]},{"name":"BitFieldResolvable","type":[[["string"," | "],["number"," | "],["bigint"," | "],["BitField"," | "],["Array","<"],["BitFieldResolvable",">"]]],"meta":{"line":127,"file":"bitfield.ts","path":"src/util"}}]}